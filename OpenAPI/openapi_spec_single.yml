openapi: 3.0.1
info:
  title: DoiT API
  description: Programmatic access to DoiT Platform
  version: v1
servers:
  - url: https://api.doit.com
security:
  - api_key: []
  - customerContext: []
    api_key: []
paths:
  /analytics/v1/alerts:
    get:
      tags:
        - Alerts
      summary: List alerts
      description: |-
        Returns a list of alerts that your account has access to.
        Alerts are listed in reverse chronological order by default.
      operationId: listAlerts
      parameters:
        - name: sortBy
          in: query
          description: A field by which the results will be sorted.
          schema:
            type: string
            enum:
              - name
              - createTime
              - updateTime
              - lastAlerted
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/maxResults"
        - $ref: "#/components/parameters/pageToken"
        - name: filter
          in: query
          description: >-
            An expression for filtering the results. The syntax is `key:[<value>]`. Multiple filters can be connected using a pipe |. See [Filters](https://developer.doit.com/docs/filters).

            Available filter keys: **owner**, **name**
          example: "name:test"
          schema:
            type: string
      responses:
        "200":
          description: >-
            OK - The request succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalAlertList"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    post:
      tags:
        - Alerts
      summary: Create an alert
      description: Creates a new alert.
      operationId: createAlert
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AlertRequest"
      responses:
        "201":
          description: Created - The request succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
      x-codegen-request-body-name: Body
  "/analytics/v1/alerts/{id}":
    get:
      tags:
        - Alerts
      summary: Retrieve an alert
      description: Returns an alert by the specified Id.
      operationId: getAlert
      parameters:
        - name: id
          in: path
          description: Alert ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: >-
            OK - Alert returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    delete:
      tags:
        - Alerts
      summary: Delete an alert
      description: Deletes the alert specified by the Id.
      operationId: deleteAlert
      parameters:
        - name: id
          in: path
          description: Alert ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK - Alert deleted.
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    patch:
      tags:
        - Alerts
      summary: Update an alert
      description: Updates the alert specified by the Id.
      operationId: updateAlert
      parameters:
        - name: id
          in: path
          description: Alert ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AlertUpdateRequest"
        required: false
      responses:
        "200":
          description: OK - Alert updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
      x-codegen-request-body-name: Body
  /analytics/v1/allocations:
    get:
      tags:
        - Allocations
      summary: List allocations
      description: |-
        Returns a list of allocations that your account has access to.
        Allocations are listed in reverse chronological order by default.
      operationId: listAllocations
      parameters:
        - $ref: "#/components/parameters/maxResults"
        - $ref: "#/components/parameters/pageToken"
        - name: filter
          in: query
          description: |-
            An expression for filtering the results.
            Valid fields: **type**, **allocationType**, **owner**, **name**.
          example: type:custom
          schema:
            type: string
        - name: sortBy
          in: query
          description: A field by which the results will be sorted.
          schema:
            type: string
            enum:
              - name
              - owner
              - type
              - allocationType
              - createTime
              - updateTime
        - $ref: "#/components/parameters/sortOrder"
      responses:
        "200":
          description: >-
            OK - The request succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pageToken:
                    type: string
                    description: Page token, returned by a previous call, to request the next page of results
                  allocations:
                    type: array
                    items:
                      $ref: "#/components/schemas/AllocationListItem"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    post:
      tags:
        - Allocations
      summary: Create an allocation
      description: Creates a new allocation.
      operationId: createAllocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SingleAllocationRequest"
      responses:
        "200":
          description: >-
            OK - The request succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewAllocationResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
      x-codegen-request-body-name: Body
  "/analytics/v1/allocations/{id}":
    get:
      tags:
        - Allocations
      summary: Retrieve an allocation
      description: Returns an allocation by the specified Id.
      operationId: getAllocation
      parameters:
        - name: id
          in: path
          description: Allocation ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: >-
            OK - Allocation returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleAllocation"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    delete:
      tags:
        - Allocations
      summary: Delete an allocation
      description: Deletes the allocation specified by the Id.
      operationId: deleteAllocation
      parameters:
        - name: id
          in: path
          description: Allocation ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK - Allocation deleted.
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          description: >-
            Conflict - The allocation cannot be deleted because it is used by other resources.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AllocationDeleteValidation"
    patch:
      tags:
        - Allocations
      summary: Update an allocation
      description: Updates the allocation specified by the Id.
      operationId: updateAllocation
      parameters:
        - name: id
          in: path
          description: Allocation ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SingleAllocationRequest"
      responses:
        "200":
          description: OK - Allocation updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleAllocation"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
      x-codegen-request-body-name: Body
  /analytics/v1/attributiongroups:
    get:
      tags:
        - Attribution Groups
      summary: List attribution groups
      description: >-
        Returns a list of attribution groups that your account has access to.

        Attribution groups are listed in reverse chronological order by default.
      operationId: listAttributionGroups
      parameters:
        - $ref: "#/components/parameters/maxResults"
        - $ref: "#/components/parameters/pageToken"
        - name: sortBy
          in: query
          description: A field by which the results will be sorted.
          schema:
            type: string
            enum:
              - name
              - owner
              - description
              - type
              - createTime
              - updateTime
        - $ref: "#/components/parameters/sortOrder"
      responses:
        "200":
          description: >-
            OK - The request succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributionGroupsListExternal"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    post:
      tags:
        - Attribution Groups
      summary: Create an attribution group
      description: Creates a new attribution group.
      operationId: createAttributionGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributionGroupRequest"
      responses:
        "201":
          description: >-
            Created - The request succeeded. Id of the created attribution group
          content: {}
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
      x-codegen-request-body-name: Body
  "/analytics/v1/attributiongroups/{id}":
    get:
      tags:
        - Attribution Groups
      summary: Retrieve an attribution group
      description: Returns a specific attribution group by id.
      operationId: getAttributionGroup
      parameters:
        - name: id
          in: path
          description: Attribution group ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: >-
            OK - Attribution group returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributionGroupGetExternal"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Attribution Groups
      summary: Delete an attribution group
      description: Deletes the specified attribution group. The operation will fail if there are resources depending on this attribution group.
      operationId: deleteAttributionGroup
      parameters:
        - name: id
          in: path
          description: Id identifying the attribution group
          required: true
          schema:
            type: string
      responses:
        "200":
          description: >-
            OK - Aattribution group deleted.
          content: {}
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          description: Conflict - The attribution group cannot be deleted because it is being used by other resources.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributionGroupDeleteValidation"
    patch:
      tags:
        - Attribution Groups
      summary: Update an attribution group
      description: Updates the specified attribution group.
      operationId: updateAttributionGroup
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributionGroupUpdateRequest"
      responses:
        "200":
          description: >-
            OK - Attribution group updated.
          content: {}
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
      x-codegen-request-body-name: Body
  /analytics/v1/attributions:
    get:
      tags:
        - Attributions
      summary: List attributions
      description: |-
        Returns a list of the attributions that your account has access to.

        Attributions are listed in reverse chronological order by default.
      operationId: listAttributions
      parameters:
        - $ref: "#/components/parameters/maxResults"
        - $ref: "#/components/parameters/pageToken"
        - name: filter
          in: query
          description: |-
            An expression for filtering the results.
            Valid fields: **type**, **owner**, **name**.
          example: type:custom
          schema:
            type: string
        - name: sortBy
          in: query
          description: The field by which the results are sorted.
          schema:
            type: string
            enum:
              - name
              - owner
              - description
              - type
              - createTime
              - updateTime
        - $ref: "#/components/parameters/sortOrder"
      responses:
        "200":
          description: >-
            OK - The request succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Attributions:
                    $ref: "#/components/schemas/AttributionListItem"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    post:
      tags:
        - Attributions
      summary: Create an attribution
      description: Creates a new attribution.
      operationId: createAttribution
      requestBody:
        content:
          application/json:
            schema:
              required:
                - components
                - name
              type: object
              properties:
                components:
                  type: array
                  description: List of Attribution filters
                  example:
                    - key: cloud_provider
                      type: fixed
                      values:
                        - amazon-web-services
                      inverse_selection: false
                      regexp:
                      include_null: false
                    - key: cost_type
                      type: fixed
                      values:
                        - Fee
                        - RIFee
                      inverse_selection: false
                      regexp:
                      include_null: false
                  items:
                    $ref: "#/components/schemas/AttributionComponent"
                description:
                  type: string
                  description: Description of the attribution
                  example: This is an example attribution
                formula:
                  type: string
                  description: Attribution formula (A is the first component, B is the second one, and so on.)
                  example: A AND B
                name:
                  type: string
                  description: Name of the attribution
                  example: An example attribution
      responses:
        "201":
          description: >-
            Created - Id of the new attribution returned.
          content:
            application/json:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
      x-codegen-request-body-name: Body
  "/analytics/v1/attributions/{id}":
    get:
      tags:
        - Attributions
      summary: Retrieve an attribution
      description: Returns an attribution by its attribution id
      operationId: getAttribution
      parameters:
        - name: id
          in: path
          description: The identifier of an attribution.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK. - The attribution returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Attribution:
                    $ref: "#/components/schemas/AttributionAPI"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Attributions
      summary: Delete an attribution
      description: Deletes the specified attribution. The operation will fail if there are resources depending on this attribution.
      operationId: deleteAttribution
      parameters:
        - name: id
          in: path
          description: Attribution ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK - Attribution deleted.
          content: {}
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          description: Conflict - The attribution cannot be deleted because it is being used by other resources.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AttributionDeleteValidation"
    patch:
      tags:
        - Attributions
      summary: Update an attribution
      description: Updates the specified attribution.
      operationId: updateAttribution
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                components:
                  type: array
                  description: List of Attribution filters
                  items:
                    $ref: "#/components/schemas/AttributionComponent"
                description:
                  type: string
                  description: Description of the attribution
                formula:
                  type: string
                  description: Attribution formula (A is the first component, B is the second one, C is the third, and so on.)
                name:
                  type: string
                  description: Attribution Name
      responses:
        "200":
          description: OK - Attribution updated.
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
      x-codegen-request-body-name: Body
  /analytics/v1/budgets:
    get:
      tags:
        - Budgets
      summary: List budgets
      description: |-
        Returns a list of budgets that your account has access to. Budgets are listed in reverse chronological order by default.
      operationId: listBudgets
      parameters:
        - name: maxResults
          in: query
          description: The maximum number of results to return in a single page. Leverage the page tokens to iterate through the entire collection.
          schema:
            type: string
            default: "50"
        - $ref: "#/components/parameters/pageToken"
        - name: filter
          in: query
          description: |-
            An expression for filtering the results of the request. The syntax is "key:[<value>]".
            Available keys: owner, lastModified in ms (>lasModified). Multiple filters can be connected using a pipe |. Note that using different keys in the same filter results in "AND," while using the same key multiple times in the same filter results in "OR".
          schema:
            type: string
        - name: minCreationTime
          in: query
          description:
            Min value for reports creation time, in milliseconds since the
            POSIX epoch. If set, only reports created after or at this timestamp
            are returned.
          schema:
            type: string
        - name: maxCreationTime
          in: query
          description:
            Max value for reports creation time, in milliseconds since the
            POSIX epoch. If set, only reports created before or at this
            timestamp are returned.
          schema:
            type: string
      responses:
        "200":
          description: >-
            OK - The request succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  budgets:
                    type: array
                    description: Array of Budgets
                    items:
                      $ref: "#/components/schemas/BudgetListItem"
                  pageToken:
                    type: string
                    description: Page token, returned by a previous call, to request the next page of results
                  rowCount:
                    type: integer
                    description: Budgets rows count
                    format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    post:
      tags:
        - Budgets
      summary: Create a budget
      description: Creats a new budget
      operationId: createBudget
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetCreateUpdateRequest"
      responses:
        "201":
          description: Created - New budget created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
      x-codegen-request-body-name: Body
  "/analytics/v1/budgets/{id}":
    get:
      tags:
        - Budgets
      summary: Retrieve a budget
      description: Returns the current utilization and configuration of the specified budget.
      operationId: getBudget
      parameters:
        - name: id
          in: path
          description: Budget ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK - Budget details returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Budget:
                    $ref: "#/components/schemas/BudgetAPI"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    delete:
      tags:
        - Budgets
      summary: Delete a budget
      description: Deletes the specified budget.
      operationId: deleteBudget
      parameters:
        - name: id
          in: path
          description: Budget ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK - Budget deleted.
          content: {}
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    patch:
      tags:
        - Budgets
      summary: Update a budget
      description: Updates the specified budget.
      operationId: updateBudget
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetCreateUpdateRequest"
        required: false
      responses:
        "200":
          description: OK - Budget updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
      x-codegen-request-body-name: Body
  /analytics/v1/dimension:
    get:
      tags:
        - Dimensions
      summary: Retrieve a dimension
      description: Returns a dimension by type and key.
      operationId: getDimensions
      parameters:
        - name: type
          in: query
          description: Dimension type
          required: true
          schema:
            $ref: "#/components/schemas/DimensionsTypes"
        - name: id
          in: query
          description: Dimension id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK - The dimension returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DimensionsExternalAPIGetResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /analytics/v1/dimensions:
    get:
      tags:
        - Dimensions
      summary: List dimensions
      description: Returns a list of the dimensions that your account has access to.
      operationId: listDimensions
      parameters:
        - $ref: "#/components/parameters/maxResults"
        - $ref: "#/components/parameters/pageToken"
        - name: filter
          in: query
          description: |-
            An expression for filtering the results.
            The fields eligible for filtering are: type, label, key.
          schema:
            type: string
        - name: sortBy
          in: query
          description: A field by which the results will be sorted.
          schema:
            type: string
            enum:
              - type
              - label
              - key
              - timestamp
        - $ref: "#/components/parameters/sortOrder"
      responses:
        "200":
          description: OK - The request succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DimensionsExternalAPIList"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /analytics/v1/reports:
    get:
      tags:
        - Reports
      summary: List reports
      description: |-
        Returns a list of all Cloud Analytics reports that your account has access to.
        Reports are returned in reverse chronological order by default.
      operationId: listReports
      parameters:
        - $ref: "#/components/parameters/maxResults"
        - $ref: "#/components/parameters/pageToken"
        - name: filter
          in: query
          description: >-
            An expression for filtering the results.

            The syntax is `key:[<value>]`. Multiple filters can be connected using a pipe |. See [Filters](https://developer.doit.com/docs/filters).

            Possible filter keys: **reportName**, **owner**, **type**, **updateTime**
          example: "reportName:This Month vs. Last"
          schema:
            type: string
        - name: minCreationTime
          in: query
          description:
            Min value for reports creation time, in milliseconds since the
            POSIX epoch. If set, only reports created after or at this timestamp
            are returned.
          schema:
            type: string
        - name: maxCreationTime
          in: query
          description:
            Max value for reports creation time, in milliseconds since the
            POSIX epoch. If set, only reports created before or at this
            timestamp are returned.
          schema:
            type: string
      responses:
        "200":
          description: OK - The request succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportList"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    post:
      tags:
        - Reports
      summary: Create a report
      description: >-
        Creates a new report.
      operationId: createReport
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Report name.
                  example: A test report by API
                description:
                  type: string
                  description: Report description.
                  example: Cost breakdown by service in the last 3 months
                config:
                  $ref: "#/components/schemas/ExternalConfig"
      responses:
        "201":
          description: Created - The request succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the new report.
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
      x-codegen-request-body-name: Body
  /analytics/v1/reports/query:
    post:
      tags:
        - Reports
      summary: Run a query
      description: >-
        Runs a report query with the specified configuration without persisting
        it.

        Fields that are not populated will use their default values if needed.
      operationId: query
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                config:
                  $ref: "#/components/schemas/ExternalConfig"
            example:
              config:
                includeSubtotals: false
                sortGroups: asc
                sortDimensions: desc
                metric:
                  type: basic
                  value: cost
                metricFilter:
                  metric:
                    type: basic
                    value: cost
                  operator: gt
                  values:
                    - 0.1
                timeRange:
                  amount: 7
                  includeCurrent: false
                  mode: last
                  unit: day
                aggregation: total
                dimensions:
                  - id: year
                    type: datetime
                  - id: month
                    type: datetime
                  - id: day
                    type: datetime
                displayValues: actuals_only
                group:
                  - limit:
                      metric:
                        type: basic
                        value: cost
                      sort: desc
                      value: 3
                    id: service_description
                    type: fixed
                timeInterval: day
      responses:
        "200":
          description: OK - The request succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunReportResult"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      x-codegen-request-body-name: Body
  "/analytics/v1/reports/{id}":
    get:
      tags:
        - Reports
      summary: Get report results
      description: Returns the results of the specified report.
      operationId: getReport
      parameters:
        - $ref: "#/components/parameters/reportId"
        - name: timeRange
          in: query
          description: >-
            An optional parameter to override the report time settings. Value
            should represented in the format P[n]Y[n]M[n]D[n]. In the representations, the [n] is replaced by the value for each of the date and time elements that follow the [n].
          schema:
            type: string
        - name: startDate
          in: query
          description: >-
            An optional parameter to override the report time settings. Must be
            provided together with `endDate`. Format: yyyy-mm-dd
          schema:
            type: string
        - name: endDate
          in: query
          description: >-
            An optional parameter to override the report time settings. Must be
            provided together with `startDate`. Format: yyyy-mm-dd
          schema:
            type: string
      responses:
        "200":
          description: OK - The request succeeded.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Report"
                  - $ref: "#/components/schemas/RunReportResult"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
    delete:
      tags:
        - Reports
      summary: Delete a report
      description: Deletes the specified Cloud Analytics report.
      operationId: deleteReport
      parameters:
        - $ref: "#/components/parameters/reportId"
      responses:
        "200":
          description: OK - Report deleted.
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    patch:
      tags:
        - Reports
      summary: Update a report
      description: |-
        Updates a report with the specified configuration.

        Only specified fields will be updated.
      operationId: updateReport
      parameters:
        - $ref: "#/components/parameters/reportId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExternalUpdateReport"
        required: false
      responses:
        "200":
          description: OK - Report updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the updated report.
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
      x-codegen-request-body-name: Body
  "/analytics/v1/reports/{id}/config":
    get:
      tags:
        - Reports
      summary: Get report config
      description: Returns the configuration of the specified Cloud Analytics report.
      operationId: getReportConfig
      parameters:
        - $ref: "#/components/parameters/reportId"
      responses:
        "200":
          description: OK - Report configuration returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalReport"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  "/sharing/v1/{resourceType}/{resourceId}":
    get:
      tags:
        - Sharing
      summary: Get resource permissions (beta)
      description: |-
        Returns the permissions associated with the specified Cloud Analytics resource.
        Supports Attributions, Attributions Groups, Alerts, Budgets, and Reports.
      operationId: getResourcePermission
      parameters:
        - $ref: "#/components/parameters/resourceType"
        - $ref: "#/components/parameters/resourceId"
      responses:
        "200":
          description: OK - Resource permissions returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePermissionsResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    put:
      tags:
        - Sharing
      summary: Update resource permissions (beta)
      description: |-
        Updates the permissions associated with the specified Cloud Analytics resource.
        Supports Attributions, Attributions Groups, Alerts, Budgets, and Reports.
      operationId: updateResourcePermission
      parameters:
        - $ref: "#/components/parameters/resourceType"
        - $ref: "#/components/parameters/resourceId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                permissions:
                  type: array
                  items:
                    $ref: "#/components/schemas/ResourcePermission"
                public:
                  type: string
                  description: The type of permissions granted to all users in the organization for this resource.
                  enum:
                    - editor
                    - viewer
                  nullable: true
      responses:
        "200":
          description: OK - Resource permissions configuration updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePermissionsResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  /anomalies/v1:
    get:
      tags:
        - Anomalies
      summary: List anomalies
      description: |-
        Returns a list of detected anomalies.
        Anomalies are returned in reverse chronological order by default.
      operationId: listAnomalies
      parameters:
        - name: minCreationTime
          in: query
          description: Min value for the anomaly detection time
          schema:
            type: string
        - name: maxCreationTime
          in: query
          description: Max value for the anomaly detection time
          schema:
            type: string
        - name: filter
          in: query
          description: An expression for filtering the results of the request
          schema:
            type: string
        - name: maxResults
          in: query
          description: The maximum number of results to return in a single page
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pageToken"
      responses:
        "200":
          description: OK - The request succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnomaliesResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/anomalies/v1/{id}":
    get:
      tags:
        - Anomalies
      summary: Retrieves an anomaly
      description: Returns the specified anomaly.
      operationId: getAnomaly
      parameters:
        - name: id
          in: path
          description: anomaly id, uniquely identifying the anomaly
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK - Anomaly returned.
          content:
            application/json:
              schema:
                required:
                  - attribution
                  - billingAccount
                  - costOfAnomaly
                  - platform
                  - scope
                  - serviceName
                  - severityLevel
                  - startTime
                  - timeFrame
                  - top3SKUs
                type: object
                properties:
                  attribution:
                    type: string
                    description: Attribution ID
                  billingAccount:
                    type: string
                    description: Billing account ID
                  costOfAnomaly:
                    type: number
                    description: The difference between the actual cost and the maximum cost in the normal range.
                    format: double
                  platform:
                    type: string
                    description: Cloud Provider name
                  scope:
                    type: string
                    description: "Scope: Project or Account"
                  serviceName:
                    type: string
                    description: Service name
                  severityLevel:
                    type: string
                    description: "Severity level: Information, Warning or Critical"
                  startTime:
                    type: integer
                    description: Usage start time of the anomaly
                    format: int64
                  endTime:
                    type: integer
                    nullable: true
                    description: End of the anomaly
                  timeFrame:
                    type: string
                    description: "Timeframe: Daily or Hourly"
                  top3SKUs:
                    $ref: "#/components/schemas/AnomalySKUArray"
                  status:
                    type: string
                    nullable: true
                    enum:
                      - active
                      - inactive
                  acknowledged:
                    description: "Has the anomaly been acknowledged"
                    type: boolean
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /auth/v1/validate:
    get:
      tags:
        - Auth
      summary: Validate a user
      description: Returns the domain and email of the current API user.
      operationId: validate
      responses:
        "200":
          description: OK - The domain and email of the API user returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
  /billing/v1/createAsset:
    post:
      tags:
        - Assets
      summary: Create an asset
      description: Creates a new asset.
      operationId: createAsset
      parameters:
        - name: type
          in: query
          description: Asset type. For example, amazon-web-services
          schema:
            type: string
            default: "amazon-web-services"
        - name: mode
          in: query
          description: Asset mode.
          schema:
            type: string
            default: "New"
        - name: accountName
          in: query
          description: The desired name of the account.
          schema:
            type: string
            default: "Account name"
        - name: rootEmail
          in: query
          description: The root account email.
          schema:
            type: string
      responses:
        "200":
          description: OK - The request succeeded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /datahub/v1/csv/upload:
    post:
      tags:
        - DataHub
      summary: Ingest CSV file
      description: Send a batch of events to DataHub using a CSV file, either uncompressed or compressed in ZIP or GZ format. It may take up to 15 minutes for the data to become available in the DoiT console.
      operationId: datahubEventsCSVFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                provider:
                  type: string
                  description: "The identifier of the data doit. Allowed characters: alphanumeric (0-9,a-z,A-Z), underscore (_), space, dash (-)."
                  example: "Datadog"
                file:
                  type: string
                  format: binary
                  description: The CSV file to upload, either uncompressed or compressed in ZIP or GZ format. The maximum file size is 30 MB.
      responses:
        "201":
          description: OK - Ingestion succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  batch:
                    type: string
                    description: batch id, generated during ingestion
                    example: "your_file.csv.gz_1730972725212"
                  ingestedRows:
                    type: integer
                    description: the number of events that have been accepted for processing
                    example: 15
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
  /datahub/v1/events:
    post:
      tags:
        - DataHub
      summary: Ingest JSON
      description: Sends batch of events to DataHub.
      operationId: datahubEvents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                events:
                  type: array
                  items:
                    type: object
                    required:
                      - provider
                      - time
                    properties:
                      provider:
                        type: string
                        description: "The identifier of the data doit. Allowed characters: alphanumeric (0-9,a-z,A-Z), underscore (_), space, dash (-)."
                        example: "Datadog"
                      id:
                        type: string
                        description: The event id. Must be unique within the dataset. If not set, a UUIDv4 will be generated at ingestion time.
                        example: "beb21d99-a8c9-4dc0-8a69-5d684cc41e6c"
                      dimensions:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                              example: "project_id"
                              description: If the type is `fixed`, the key must
                                be a valid fixed value. See the
                                [DataHub API Guide](https://developer.doit.com/docs/datahub-api) for more information.
                            type:
                              type: string
                              description: The dimension type.
                              x-type: string
                              enum:
                                - fixed
                                - label
                                - project_label
                                - system_label
                            value:
                              oneOf:
                                - type: string
                                - type: boolean
                              example: "production-project"
                      time:
                        type: string
                        format: date-time
                        description: The timestamp of the event in RFC3339 format.
                        example: "2024-03-10T23:00:00Z"
                      metrics:
                        type: array
                        items:
                          type: object
                          properties:
                            value:
                              type: number
                              format: double
                              description: The value of the metric.
                              example: 10.5
                            type:
                              type: string
                              description: 'The type of the metric. If you
                                choose "cost" or "usage", it will map to the
                                basic "Cost" or "Usage" metric in Cloud
                                Analytics reports. You can also use this field
                                to define custom metric types, such as
                                "working_hours", "ride", etc.'
                              example: "cost"
      responses:
        "201":
          description: OK - Ingestion succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ingestion success"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
    delete:
      tags:
        - DataHub
      summary: Delete all events
      description: Deletes all the previously sent events.
      operationId: deleteDatahubEvents
      responses:
        "200":
          description: Delete success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Delete success"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
  /datahub/v1/events/delete:
    post:
      tags:
        - DataHub
      summary: Delete specific events
      description: >-
        Deletes specific events using filters. Note that the two filters, `eventIds` and `providers`, are mutually exclusive.
      operationId: deleteDatahubEventsByFilter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Exactly one of "eventIds" or "providers" must be provided.
              properties:
                eventIds:
                  type: array
                  items:
                    type: string
                    description: Id of the event to be deleted.
                    example: "beb21d99-a8c9-4dc0-8a69-5d684cc41e6c"
                providers:
                  type: array
                  items:
                    type: string
                    description: The doit (dataset) of the events to be deleted.
                    example: "Datadog"
              minProperties: 1
              maxProperties: 1
      responses:
        "200":
          description: OK - Events deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Delete success"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
  /billing/v1/invoices:
    get:
      tags:
        - Invoices
      summary: List invoices
      description: |-
        Returns a list of all the current and historical invoices for your organization.
        Invoices are returned in reverse chronological order by default.
      operationId: listInvoices
      parameters:
        - name: maxResults
          in: query
          description: The maximum number of results to return in a single page. Leverage the page tokens to iterate through the entire collection.
          schema:
            type: integer
            format: int64
            default: 50
        - $ref: "#/components/parameters/pageToken"
        - name: filter
          in: query
          schema:
            $ref: "#/components/schemas/Filter"
        - name: minCreationTime
          in: query
          description: Min value for the invoice creation time, in milliseconds since the POSIX epoch. If set, only invoices created after or at this timestamp are returned.
          schema:
            type: integer
            format: int64
        - name: maxCreationTime
          in: query
          description: Max value for the invoice creation time, in milliseconds since the POSIX epoch. If set, only invoices created before or at this timestamp are returned.
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK - All available invoices returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  invoices:
                    type: array
                    description: Array of Invoices
                    items:
                      $ref: "#/components/schemas/InvoiceListItem"
                  pageToken:
                    type: string
                    description: Page token. Can be used to request the next page of results.
                  rowCount:
                    type: integer
                    description: Invoices rows count
                    format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/billing/v1/invoices/{id}":
    get:
      tags:
        - Invoices
      summary: Retrieve an invoice
      description: Returns the full details of an invoice specified by the invoice number.
      operationId: getInvoice
      parameters:
        - name: id
          in: path
          description: Invoice number.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK - Invoice details returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Invoice number, identifying the invoice.
                  invoiceDate:
                    type: integer
                    description: The time when this invoice was issued, in milliseconds since the epoch.
                    format: int64
                  platform:
                    $ref: "#/components/schemas/InvoicePlatform"
                  dueDate:
                    type: integer
                    description: The last day to pay the invoice, in milliseconds since the epoch
                    format: int64
                  status:
                    type: string
                    description: Status of the invoice
                    enum:
                      - OPEN
                      - PAST DUE
                      - PAID
                  totalAmount:
                    type: number
                    description: Total invoiced amount
                    format: double
                  balanceAmount:
                    type: number
                    description: Invoice balance to be paid
                    format: double
                  currency:
                    $ref: "#/components/schemas/Currency"
                  url:
                    type: string
                    description: Link to [invoice details page](https://help.doit.com/docs/billing/invoices-and-payments/managing-invoices) in the DoiT console. You can download the PDF invoice from the invoice details page.
                  lineItems:
                    type: array
                    description: Invoice line items.
                    items:
                      $ref: "#/components/schemas/ListItem"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /core/v1/cloudincidents:
    get:
      tags:
        - Cloud Incidents
      summary: List cloud incidents
      description: >-
        Returns a list of all the active and historical cloud incidents for Google Cloud and Amazon Web Services.

        Incidents are returned in reverse chronological order by default.
      operationId: listKnownIssues
      parameters:
        - name: maxResults
          in: query
          description: The maximum number of results to return in a single page. Leverage the page tokens to iterate through the entire collection.
          schema:
            type: integer
            format: int64
            default: 50
        - $ref: "#/components/parameters/pageToken"
        - name: filter
          in: query
          description: An expression for filtering the results. The syntax
            is `key:[<value>]`. Multiple filters can be connected using a pipe
            |. See [Filters](https://developer.doit.com/docs/filters).
          schema:
            type: string
        - name: minCreationTime
          in: query
          description: Min value for the cloud incident creation time, in milliseconds since the POSIX epoch. If set, only cloud incidents created after or at this timestamp are returned.
          schema:
            type: string
        - name: maxCreationTime
          in: query
          description: |
            Max value for the cloud incident creation time, in milliseconds since the POSIX epoch. If set, only cloud incidents created before or at this
            timestamp are returned.
          schema:
            type: string
      responses:
        "200":
          description: OK - The request succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  incidents:
                    type: array
                    description: Array of cloud incidents
                    items:
                      $ref: "#/components/schemas/CloudIncidentListItem"
                  pageToken:
                    type: string
                    description:
                      Page token, returned by a previous call, to request the next page
                      of results
                  rowCount:
                    type: integer
                    description: Cloud incidents rows count
                    format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/core/v1/cloudincidents/{id}":
    get:
      tags:
        - Cloud Incidents
      summary: Retrieve a cloud incident
      description: Returns the specified cloud incident.
      operationId: getKnownIssue
      parameters:
        - name: id
          in: path
          description: The unique id of a cloud incident.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK - Cloud incident returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  createTime:
                    type: integer
                    description: The time when this cloud incident was created, in milliseconds since the epoch.
                    format: int64
                  description:
                    type: string
                    description: Detailed explanation on the cloud incident.
                  id:
                    type: string
                    description: The unique id of a cloud incident
                  platform:
                    type: string
                    description: The cloud platform.
                    enum:
                      - google-cloud
                      - amazon-web-services
                  product:
                    type: string
                    description: The name of the product affected by the cloud incident
                  status:
                    type: string
                    description: The Status of the issue
                    enum:
                      - active
                      - archived
                  summary:
                    type: string
                    description: A summary of the cloud incident.
                  symptoms:
                    type: string
                    description: Cloud incident symptoms, if available.
                  title:
                    type: string
                    description: Cloud incident name provided by the cloud vendor.
                  workaround:
                    type: string
                    description: Mitigation workaround for the cloud incident, if available.
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  /customers/v1/accountTeam:
    get:
      tags:
        - AccountTeam
      summary: List account team
      description: Returns a list of all DoiT account managers assigned to your organization.
      operationId: listAccountTeam
      responses:
        "200":
          description: OK - List of account managerss returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accountManagers:
                    type: array
                    items:
                      $ref: "#/components/schemas/AccountManagerListItem"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
  /iam/v1/users:
    get:
      tags:
        - Users
      summary: List users
      description: Returns a list of all users in the organization, including both active users and invited users.
      operationId: listUsers
      responses:
        "200":
          description: OK - List of users returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUsersResponseBody"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
  "/iam/v1/users/{id}":
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes a user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The unique ID of the user to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK - User deleted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
    patch:
      tags:
        - Users
      summary: Update user
      description: Updates user information including name, job function, phone, language, and role.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: The unique id of the user to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: OK - User updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
  /iam/v1/roles:
    get:
      tags:
        - Roles
      summary: List roles
      description: Returns a list of roles
      operationId: listRoles
      responses:
        "200":
          description: OK - List of roles returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      $ref: "#/components/schemas/Role"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
  /iam/v1/organizations:
    get:
      tags:
        - Organizations
      summary: List organizations
      description: Returns a list of organizations
      operationId: listOrganizations
      responses:
        "200":
          description: OK - List of organizations returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
  /support/v1/metadata/platforms:
    get:
      tags:
        - Platforms
      summary: List available platforms.
      description: Returns a list of all the available platforms.
      operationId: listPlatforms
      responses:
        "200":
          description: OK - List of available platforms returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  platforms:
                    type: array
                    items:
                      $ref: "#/components/schemas/PlatformAPI"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
  /support/v1/metadata/products:
    get:
      tags:
        - Products
      summary: List available products.
      description: Returns a list of all the available products of specific platforms.
      operationId: listProducts
      parameters:
        - name: platform
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK - List of available products returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductAPI"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
  /billing/v1/assets:
    get:
      tags:
        - Assets
      summary: List assets
      description: >-
        Returns a list of all available customer assets such as Google Cloud billing
        accounts, G Suite/Workspace subscriptions, etc.

        Assets are returned in reverse chronological order by default.
      operationId: idOfAssets
      parameters:
        - name: maxResults
          in: query
          description: The maximum number of results to return in a single page. Leverage the page tokens to iterate through the entire collection.
          schema:
            type: integer
            format: int64
            default: 50
        - $ref: "#/components/parameters/pageToken"
        - name: filter
          in: query
          description: |
            An expression for filtering the results of the request. The syntax
            is `key:[<value>]`. e.g: "type:g-suite". Multiple filters can be
            connected using a pipe |. Note that using different keys in the same
            filter results in “AND,” while using the same key multiple times in
            the same filter results in “OR”.
          schema:
            type: string
      responses:
        "200":
          description: OK - List of available assets returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  assets:
                    type: array
                    description: Array of Assets
                    items:
                      $ref: "#/components/schemas/AssetItem"
                  pageToken:
                    type: string
                    description: Page token. Can be used to request the next page of results.
                  rowCount:
                    type: integer
                    description: Assets rows count
                    format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/billing/v1/assets/{id}":
    patch:
      tags:
        - Assets
      summary: Update an asset
      description: Updates an existing asset such as G Suite/Workspace or Office 365 subscription to add or remove licenses.
      operationId: idOfAsset
      parameters:
        - name: id
          in: path
          description: The unique id of an asset.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  format: int64
        required: false
      responses:
        "200":
          description: OK - Asset updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  properties:
                    $ref: "#/components/schemas/AssetProperties"
                  type:
                    type: string
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
      x-codegen-request-body-name: Body
  /support/v1/tickets:
    get:
      tags:
        - Support Requests
      summary: List requests
      description: |-
        Returns a list of all historical requests that your account has access to.
        Tickets are returned in reverse chronological order by default.
      operationId: idOfTickets
      parameters:
        - name: maxResults
          in: query
          description: The maximum number of results to return in a single page. Leverage the page tokens to iterate through the entire collection.
          schema:
            minimum: 1
            type: integer
            format: int64
            default: 50
        - $ref: "#/components/parameters/pageToken"
        - name: filter
          in: query
          description: |
            An expression for filtering the results of the request. The syntax is `key:[<value>]`. e.g: "severity:normal". Multiple filters can be
            connected using a pipe |. Note that using different keys in the same
            filter results in “AND,” while using the same key multiple times in
            the same filter results in “OR”.
          schema:
            type: string
        - name: minCreationTime
          in: query
          description:
            Min value for tickets creation time, in milliseconds since the
            POSIX epoch. If set, only tickets created after or at this timestamp
            are returned.
          schema:
            type: string
        - name: maxCreationTime
          in: query
          description:
            Max value for tickets creation time, in milliseconds since the
            POSIX epoch. If set, only tickets created before or at this
            timestamp are returned.
          schema:
            type: string
      responses:
        "200":
          description: OK - List of historical requests returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketsList"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    post:
      tags:
        - Support Requests
      summary: Create a request
      description: Creates a new support request
      operationId: idOfTicketsPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TicketCreateFormExtAPI"
        required: true
      responses:
        "201":
          description: Created - New support request created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketResponseExtAPI"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
      x-codegen-request-body-name: Body
  /iam/v1/users/invite:
    post:
      tags:
        - Users
      summary: Invite user
      description: Invites a new user to the organization with specified role and organization.
      operationId: inviteUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteUserRequest"
      responses:
        "201":
          description: Created - User invitation created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
components:
  schemas:
    AccountManagerListItem:
      type: object
      properties:
        email:
          type: string
        id:
          type: string
        name:
          type: string
        role:
          type: string
        calendlyLink:
          type: string
    UserListItem:
      type: object
      properties:
        id:
          type: string
          description: The unique id of the user
        email:
          type: string
          description: The email address of the user
        displayName:
          type: string
          description: The user's display name
        firstName:
          type: string
          description: The user's first name
        lastName:
          type: string
          description: The user's last name
        jobFunction:
          type: string
          description: The user's job function
          enum:
            - "Data Engineer/Data Analysts"
            - "Executive Team"
            - "Finance / Accounting"
            - "Founder"
            - "Legal / Purchasing"
            - "Management"
            - "Sales / Marketing"
            - "Software / Ops Engineer"
        phone:
          type: string
          description: The user's country code (e.g., +44)
          pattern: '^\+[0-9]+$'
        phoneExtension:
          type: string
          description: The user's phone extension
        language:
          type: string
          description: The user's preferred language
          enum:
            - en
            - ja
        roleId:
          type: string
          description: The id of the user's role
        organizationId:
          type: string
          description: The id of the user's organization
        status:
          type: string
          description: The status of the user (active or invited)
          enum:
            - active
            - invited
    InviteUserRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: The email address of the user to invite
          format: email
        roleId:
          type: string
          description: The id of the role to assign to the user
        organizationId:
          type: string
          description: The id of the organization to assign the user to
    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          description: The user's first name
        lastName:
          type: string
          description: The user's last name
        jobFunction:
          type: string
          description: The user's job function
          enum:
            - "Data Engineer/Data Analysts"
            - "Executive Team"
            - "Finance / Accounting"
            - "Founder"
            - "Legal / Purchasing"
            - "Management"
            - "Sales / Marketing"
            - "Software / Ops Engineer"
        phone:
          type: string
          description: The user's country code (e.g., +44)
          pattern: '^\+[0-9]+$'
        phoneExtension:
          type: string
          description: The user's phone extension (8-15 digits)
          pattern: "^[0-9]{8,15}$"
        language:
          type: string
          description: The user's preferred language
          enum:
            - en
            - ja
        roleId:
          type: string
          description: The id of the role to assign to the user
    UpdateUserResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
        user:
          $ref: "#/components/schemas/UpdatedUserBody"
    UpdatedUserBody:
      type: object
      properties:
        id:
          type: string
          description: The unique id of the user
        displayName:
          type: string
          description: The user's display name
        firstName:
          type: string
          description: The user's first name
        lastName:
          type: string
          description: The user's last name
        email:
          type: string
          description: The user's email address
        jobFunction:
          type: string
          description: The user's job function
          enum:
            - "Data Engineer/Data Analysts"
            - "Executive Team"
            - "Finance / Accounting"
            - "Founder"
            - "Legal / Purchasing"
            - "Management"
            - "Sales / Marketing"
            - "Software / Ops Engineer"
        phone:
          type: string
          description: The user's country code (e.g., +44)
          pattern: '^\+[0-9]+$'
        phoneExtension:
          type: string
          description: The user's phone extension
        language:
          type: string
          description: The user's preferred language
          enum:
            - en
            - ja
        roleId:
          type: string
          description: The id of the user's role
        organizationId:
          type: string
          description: The id of the user's organization
    DeleteUserResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
    AdvancedAnalysis:
      type: object
      properties:
        forecast:
          type: boolean
        notTrending:
          type: boolean
        trendingDown:
          type: boolean
        trendingUp:
          type: boolean
      description: Advanced analysis options. Each of these can be set independently
    Alert:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          description: Alert ID.
        name:
          type: string
          description: Alert Name.
          default: ""
        createTime:
          type: integer
          description: The time when the alter was created (in UNIX timestamp).
          format: int64
        updateTime:
          type: integer
          description: Last time the alert was modified (in UNIX timestamp).
          format: int64
        lastAlerted:
          type: integer
          description: Last time the alert was triggered (in UNIX timestamp).
          format: int64
        recipients:
          type: array
          description: List of emails that will be notified when the alert is triggered.
          items:
            type: string
        config:
          $ref: "#/components/schemas/AlertConfig"
      example:
        id: 7jyrczd6CSh3M8TuQ6Qq
        name: fgfgh
        createTime: 1678628817062
        updateTime: 1678628938891
        lastAlerted: null
        recipients:
          - user1@example.com
          - user2@example.com
        config:
          condition: value
          currency: USD
          metric:
            type: basic
            value: cost
          operator: gt
          evaluateForEach: ""
          attributions:
            - PvqyGcdFcTHh7aLUdGdf
          scopes: []
          timeInterval: month
          dataSource: billing
          value: 500
    AlertConfig:
      type: object
      required:
        - metric
        - timeInterval
        - value
      properties:
        condition:
          $ref: "#/components/schemas/Condition"
        currency:
          $ref: "#/components/schemas/Currency"
        metric:
          $ref: "#/components/schemas/MetricConfig"
        operator:
          $ref: "#/components/schemas/MetricFilterText"
        evaluateForEach:
          type: string
          description: >-
            Add a dimension to break down the evaluation of the condition. For example, evaluate a condition over an attribution for each "Service".
        attributions:
          type: array
          description: The attributions selected define the scope to monitor.
          items:
            type: string
        scopes:
          type: array
          description: The filters selected define the scope of the alert.
          items:
            $ref: "#/components/schemas/Scope"
        timeInterval:
          type: string
          description: The time interval to evaluate the condition.
          default: year
          enum:
            - hour
            - day
            - week
            - month
            - quarter
            - year
        dataSource:
          type: string
        value:
          type: number
          format: double
    AlertRequest:
      required:
        - config
        - name
      type: object
      properties:
        config:
          $ref: "#/components/schemas/AlertConfig"
        name:
          type: string
          description: Name of the alert.
        recipients:
          type: array
          description: List of emails that will be notified when the alert is triggered
          items:
            type: string
      example:
        config:
          metric:
            type: basic
            value: cost
          timeInterval: year
          operator: gt
          scopes:
            - key: service_description
              type: fixed
              values:
                - Amazon Simple Storage Service
          condition: value
          currency: USD
          value: 1000
        name: test08
    AlertThreshold:
      type: object
      properties:
        amount:
          type: number
          format: double
        percentage:
          type: number
          format: double
    AlertUpdateRequest:
      required:
        - config
      type: object
      properties:
        config:
          $ref: "#/components/schemas/AlertConfig"
        name:
          type: string
          description: Alert name
        recipients:
          type: array
          description: List of emails that will be notified when the alert is triggered
          items:
            type: string
    AllocationComponent:
      required:
        - key
        - type
        - values
        - mode
      type: object
      properties:
        key:
          type: string
          description: 'Key of a dimension. Examples: "billing_account_id", "country", etc.'
        type:
          $ref: "#/components/schemas/DimensionsTypes"
        values:
          type: array
          items:
            type: string
            description: Values to filter on
        inverse_selection:
          type: boolean
          description: If true, all selected values will be excluded.
          default: false
        include_null:
          type: boolean
          description: Include null values
          default: false
        mode:
          type: string
          description: Filter mode to apply
          enum:
            - is
            - starts_with
            - ends_with
            - contains
            - regexp
    NewAllocationResponse:
      type: object
      properties:
        id:
          type: string
          description: ID of the created allocation
        allocationType:
          type: string
          description: Type of the created allocation
          enum:
            - single
            - group
    AllocationListItem:
      type: object
      properties:
        id:
          type: string
          description: Allocation ID
        name:
          type: string
          description: Allocation name
        owner:
          type: string
          description: Allocation owner
        type:
          type: string
          description: Type of allocation (preset or custom)
        allocationType:
          type: string
          description: Type of allocation (single or group)
          enum:
            - single
            - group
        createTime:
          type: integer
          description: The time when the allocation was created (in UNIX timestamp).
          format: int64
        updateTime:
          type: integer
          description: Last time the allocation was modified (in UNIX timestamp).
          format: int64
        urlUI:
          type: string
          description: URL to view the allocation in DoiT Cloud Navigator.
    AllocationRule:
      type: object
      properties:
        components:
          type: array
          description: List of allocation filter components
          items:
            $ref: "#/components/schemas/AllocationComponent"
        formula:
          type: string
          description: Formula for combining components (A is the first component, B is the second one, etc.)
          example: "A AND B"
    AllocationDeleteValidation:
      type: object
      properties:
        id:
          type: string
          description: Allocation ID
        type:
          type: string
          description: Type of allocation (single or group)
          enum:
            - single
            - group
        error:
          type: string
          description: Error message explaining why deletion failed
        resources:
          type: object
          description: Map of resources using this allocation, keyed by resource type
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/ResourceReference"
    AnomaliesResponse:
      type: object
      properties:
        anomalies:
          type: array
          items:
            $ref: "#/components/schemas/AnomalyItem"
        pageToken:
          type: string
        rowCount:
          type: integer
          format: int64
    AnomalyItem:
      required:
        - attribution
        - billingAccount
        - costOfAnomaly
        - platform
        - scope
        - serviceName
        - severityLevel
        - startTime
        - timeFrame
        - top3SKUs
      type: object
      properties:
        attribution:
          type: string
          description: Attribution ID
        billingAccount:
          type: string
          description: Billing account ID
        costOfAnomaly:
          type: number
          description: Cost of the anomaly over and above the expected normal cost
          format: double
        id:
          type: string
        platform:
          type: string
          description: Cloud Provider name
        scope:
          type: string
          description: "Scope: Project or Account"
        serviceName:
          type: string
          description: Service name
        severityLevel:
          type: string
          description: "Severity level: Information, Warning or Critical"
        startTime:
          type: integer
          description: Usage start time of the anomaly
          format: int64
        endTime:
          type: integer
          nullable: true
          description: End of the anomaly
        timeFrame:
          type: string
          description: "Timeframe: Daily or Hourly"
        top3SKUs:
          $ref: "#/components/schemas/AnomalySKUArray"
        status:
          type: string
          nullable: true
          enum:
            - active
            - inactive
        acknowledged:
          description: "Has the anomaly been acknowledged"
          type: boolean

    AnomalySKU:
      type: object
      properties:
        cost:
          type: number
          format: double
        name:
          type: string
    AnomalySKUArray:
      type: array
      items:
        $ref: "#/components/schemas/AnomalySKU"
    AssetResponse:
      type: object
      properties:
        accountID:
          type: string
    AttributionAPI:
      required:
        - name
      type: object
      properties:
        anomalyDetection:
          type: boolean
          description: Indicates if the attribution has an active anomaly detection.
        components:
          type: array
          description: List of Attribution filters
          items:
            $ref: "#/components/schemas/AttributionComponent"
        createTime:
          type: integer
          description: Creation time of this Attribution (in unix milliseconds)
          format: int64
        description:
          type: string
          description: Attribution description
          default: ""
        formula:
          type: string
          description: Attribution formula (A is first component, B is second component, C is third component, etc.)
        id:
          type: string
          description: |-
            attribution ID, identifying the attribution
            in:path
        name:
          type: string
          description: Attribution Name
          default: ""
        type:
          type: string
          description: Type of Attribution can be either "preset" or "custom"
        updateTime:
          type: integer
          description: Last time somebody modified this Attribution (in unix milliseconds)
          format: int64
    AttributionComponent:
      required:
        - key
        - type
      type: object
      properties:
        include_null:
          type: boolean
        inverse_selection:
          type: boolean
          description: If true, all selected values will be excluded.
        key:
          type: string
          description: 'Key of a dimension. Examples: "service_id", "cloud_provider", "sku_description"'
          example: "service_id"
        regexp:
          type: string
          description: Filter the dimension values using regular expression.
        type:
          $ref: "#/components/schemas/DimensionsTypes"
        values:
          type: array
          items:
            type: string
            description: 'Value of the dimension. Examples: "152E-C115-5142", "google-cloud", "team-a"'
            example: "google-cloud"
    AttributionGroupGetExternal:
      type: object
      properties:
        attributions:
          type: array
          items:
            $ref: "#/components/schemas/SortableItem"
        cloud:
          type: array
          items:
            type: string
        customer:
          $ref: "#/components/schemas/DocumentRef"
        description:
          type: string
        id:
          type: string
        name:
          type: string
        organization:
          $ref: "#/components/schemas/DocumentRef"
        timeCreated:
          type: string
          format: date-time
        timeModified:
          type: string
          format: date-time
        type:
          $ref: "#/components/schemas/ObjectType"
    AttributionGroupRequest:
      required:
        - attributions
        - name
      type: object
      properties:
        attributions:
          type: array
          description: List of the attributions that are part of the attribution group
          items:
            type: string
        description:
          type: string
          description: Description of the attribution group
          default: description
        name:
          type: string
          description: Name of the attribution group
          default: attribution group
        nullFallback:
          type: string
          description: Custom label for any values that do not fit into attributions
          default: "Unallocated"
    AttributionGroupUpdateRequest:
      required:
        - attributions
        - name
      type: object
      properties:
        attributions:
          type: array
          description: List of the attributions that are part of the attribution group
          items:
            type: string
        description:
          type: string
          description: Description of the attribution group
          default: description
        name:
          type: string
          description: Name of the attribution group
          default: attribution group
        nullFallback:
          type: string
          description: Custom label for any values that do not fit into attributions
          default: "Unallocated"
    AttributionGroupsListExternal:
      type: object
      properties:
        attributionGroups:
          type: array
          description: Array of AttributionGroup
          items:
            $ref: "#/components/schemas/SortableItem"
        pageToken:
          type: string
          description:
            Page token, returned by a previous call, to request the next page
            of results
        rowCount:
          type: integer
          description: AttributionGroup rows count
          format: int64
    AttributionListItem:
      required:
        - name
      type: object
      properties:
        createTime:
          type: integer
          description: Creation time of this Attribution (in unix milliseconds)
          format: int64
        description:
          type: string
          description: Attribution description
          default: ""
        id:
          type: string
          description: |-
            attribution ID, identifying the attribution
            in:path
        name:
          type: string
          description: Attribution Name
        owner:
          type: string
          description: Attribution owner
          default: ""
        type:
          type: string
          description: Type of Attribution can be either preset or custom
        updateTime:
          type: integer
          description: Last time somebody modified this Attribution (in unix milliseconds)
          format: int64
    Budget:
      required:
        - currency
        - name
        - scope
        - startPeriod
        - timeInterval
        - type
      type: object
      properties:
        alerts:
          type: array
          description: List of up to three thresholds defined as percentage of amount
          items:
            $ref: "#/components/schemas/ExternalBudgetAlert"
        amount:
          type: number
          description: |-
            Budget period amount
            required: true(if usePrevSpend is false)
          format: double
        collaborators:
          type: array
          description: List of permitted users to view/edit the report
          items:
            $ref: "#/components/schemas/Collaborator"
        currency:
          $ref: "#/components/schemas/Currency"
        description:
          type: string
          description: Budget description
          default: '""'
        endPeriod:
          type: integer
          description: |-
            Fixed budget end date
            required: true(if budget type is fixed), in milliseconds since the epoch.
          format: int64
        growthPerPeriod:
          type: number
          description: Periodical growth percentage in recurring budget
          format: double
          default: 0
        id:
          type: string
          description: |-
            budget ID, identifying the report
            in:path
        metric:
          type: string
          description: Budget metric - currently fixed to "cost"
          default: "cost"
        name:
          type: string
          description: Budget Name
        public:
          type: string
          enum:
            - owner
            - editor
            - viewer
        recipients:
          type: array
          description: List of emails to notify when reaching alert threshold
          items:
            type: string
        recipientsSlackChannels:
          type: array
          description: List of slack channels to notify when reaching alert threshold
          items:
            $ref: "#/components/schemas/SlackChannel"
        scope:
          type: array
          description: List of attributions that defines that budget scope
          items:
            type: string
        startPeriod:
          type: integer
          description: Budget start Date, in milliseconds since the epoch.
          format: int64
        timeInterval:
          type: string
          description:
            'Recurring budget interval can be on of: ["day", "week", "month",
            "quarter","year"]'
        type:
          type: string
          description: 'budget type can be one of: ["fixed", "recurring"]'
        usePrevSpend:
          type: boolean
          description:
            Use the last period's spend as the target amount for recurring
            budgets
          default: false
    BudgetAPI:
      required:
        - currency
        - name
        - scopes
        - startPeriod
        - timeInterval
        - type
      type: object
      properties:
        alerts:
          type: array
          description: List of up to three thresholds defined as percentage of amount
          items:
            $ref: "#/components/schemas/ExternalBudgetAlert"
        amount:
          type: number
          description: |-
            Budget period amount
            required: true(if usePrevSpend is false)
          format: double
        collaborators:
          type: array
          description: List of permitted users to view/edit the report
          items:
            $ref: "#/components/schemas/Collaborator"
        createTime:
          type: integer
          description: Creation time (in UNIX timestamp)
          format: int64
        currency:
          $ref: "#/components/schemas/Currency"
        currentUtilization:
          type: number
          format: double
        description:
          type: string
          description: Budget description
        endPeriod:
          type: integer
          description: |-
            Fixed budget end date (in UNIX timestamp)
            required: true(if budget type is fixed)
          format: int64
        forecastedUtilization:
          type: number
          format: double
        growthPerPeriod:
          type: number
          description: Periodical growth percentage in recurring budget
          format: double
          default: 0
        id:
          type: string
          description: |-
            budget ID, identifying the report
            in:path
        metric:
          type: string
          description: Budget metric - currently fixed to "cost"
          default: "cost"
        name:
          type: string
          description: Budget Name
        public:
          type: string
          enum:
            - owner
            - editor
            - viewer
        recipients:
          type: array
          description: List of emails to notify when reaching alert threshold
          items:
            type: string
        recipientsSlackChannels:
          type: array
          description: List of slack channels to notify when reaching alert threshold
          items:
            $ref: "#/components/schemas/SlackChannel"
        scopes:
          type: array
          description: The filters selected define the scope of the budget.
          items:
            $ref: "#/components/schemas/Scope"
        startPeriod:
          type: integer
          description: Budget start Date (in UNIX timestamp)
          format: int64
        timeInterval:
          type: string
          description: 'Recurring budget interval can be one of: ["day", "week", "month","quarter","year"]'
        type:
          type: string
          description: 'budget type can be one of: ["fixed", "recurring"]'
        updateTime:
          type: integer
          description: Update time (in UNIX timestamp)
          format: int64
        usePrevSpend:
          type: boolean
          description:
            Use the last period's spend as the target amount for recurring
            budgets
          default: false
    BudgetListItem:
      type: object
      properties:
        alertThresholds:
          type: array
          items:
            $ref: "#/components/schemas/AlertThreshold"
        amount:
          type: number
          format: double
        budgetName:
          type: string
        createTime:
          type: integer
          format: int64
        currency:
          type: string
        currentUtilization:
          type: number
          format: double
        endPeriod:
          type: integer
          format: int64
        forecastedUtilizationDate:
          type: integer
          format: int64
        id:
          type: string
        owner:
          type: string
        scope:
          type: array
          items:
            type: string
        startPeriod:
          type: integer
          format: int64
        timeInterval:
          type: string
        updateTime:
          type: integer
          format: int64
        url:
          type: string
    BudgetCreateUpdateAlert:
      type: object
      properties:
        percentage:
          type: number
          format: double
    BudgetCreateUpdateRequest:
      type: object
      properties:
        alerts:
          type: array
          description: List of up to three thresholds defined as percentage of amount
          items:
            $ref: "#/components/schemas/BudgetCreateUpdateAlert"
        amount:
          type: number
          description: |-
            Budget period amount
            required: true(if usePrevSpend is false)
          format: double
        seasonalAmounts:
          type: array
          description: List of seasonal amounts for recurring budgets with different amounts per period
          items:
            type: number
            format: double
        collaborators:
          type: array
          description: List of permitted users to view/edit the report
          items:
            $ref: "#/components/schemas/Collaborator"
        currency:
          $ref: "#/components/schemas/Currency"
        description:
          type: string
          description: Budget description
          default: ""
        endPeriod:
          type: integer
          description: |-
            Fixed budget end date
            required: true(if budget type is fixed)
          format: int64
        growthPerPeriod:
          type: number
          description: Periodical growth percentage in recurring budget
          format: double
          default: 0
        metric:
          type: string
          description: Budget metric - currently fixed to "cost"
          default: "cost"
        name:
          type: string
          description: Budget Name
        public:
          type: string
          enum:
            - owner
            - editor
            - viewer
        recipients:
          type: array
          description: List of emails to notify when reaching alert threshold
          items:
            type: string
        recipientsSlackChannels:
          type: array
          description: List of slack channels to notify when reaching alert threshold
          items:
            $ref: "#/components/schemas/SlackChannel"
        scope:
          type: array
          description: List of attributions that defines that budget scope
          items:
            type: string
        startPeriod:
          type: integer
          description: Budget start Date
          format: int64
        timeInterval:
          type: string
          description:
            'Recurring budget interval can be on of: ["day", "week", "month",
            "quarter","year"]'
        type:
          type: string
          description: 'budget type can be one of: ["fixed", "recurring"]'
        usePrevSpend:
          type: boolean
          description:
            Use the last period's spend as the target amount for recurring
            budgets
          default: false
    Collaborator:
      type: object
      properties:
        email:
          type: string
        role:
          type: string
          enum:
            - owner
            - editor
            - viewer
    CollectionRef:
      description: A CollectionRef is a reference to Firestore collection.
      type: object
      properties:
        ID:
          type: string
          description: ID is the collection identifier.
        Parent:
          type: object
          description: The root collection.
        Path:
          type: string
          description: 'The full resource path of the collection:
            "projects/P/databases/D/documents..."'
    Condition:
      type: string
    Currency:
      type: string
      enum:
        - USD
        - ILS
        - EUR
        - AUD
        - CAD
        - GBP
        - DKK
        - NOK
        - SEK
        - BRL
        - SGD
        - MXN
        - CHF
        - MYR
        - TWD
        - EGP
        - ZAR
        - JPY
        - IDR
        - AED
        - THB
        - COP
    Dimension:
      description: A dimension to apply to the report.
      type: object
      properties:
        id:
          type: string
          description: The field to apply to the dimension.
        type:
          $ref: "#/components/schemas/DimensionsTypes"
      example:
        id: sku_description
        type: fixed
    DimensionsExternalAPIGetResponse:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        type:
          $ref: "#/components/schemas/DimensionsTypes"
        values:
          type: array
          items:
            $ref: "#/components/schemas/ExternalAPIGetValue"
    DimensionsExternalAPIList:
      type: object
      properties:
        dimensions:
          type: array
          items:
            $ref: "#/components/schemas/SortableItem"
        pageToken:
          type: string
        rowCount:
          type: integer
          format: int64
    DimensionsTypes:
      type: string
      enum:
        - datetime
        - fixed
        - optional
        - label
        - tag
        - project_label
        - system_label
        - attribution
        - attribution_group
        - gke
        - gke_label
    DocumentRef:
      description: A DocumentRef is a reference to a Firestore document.
      type: object
      properties:
        ID:
          type: string
          description: "The ID of the document: the last component of the resource path."
        Parent:
          $ref: "#/components/schemas/CollectionRef"
        Path:
          type: string
          description: >-
            The full resource path of the document. A document "doc-1" in
            collection "coll-1" would be: "projects/P/databases/D/documents/coll-1/doc-1".
    Error:
      type: object
      properties:
        error:
          type: string
          description: Detailed error message.
    ExternalAPIGetValue:
      type: object
      properties:
        cloud:
          type: string
        value:
          type: string
    ExternalAlertList:
      type: object
      properties:
        pageToken:
          type: string
          description: Page token. It is used to request a specific page of the list results.
          example: bDl0QkEwVFZxUEwxaUJRaHhTcXM
        rowCount:
          type: integer
          description: The number of returned records.
          format: int64
          example: 1
        alerts:
          type: array
          description: Array of alerts
          items:
            $ref: "#/components/schemas/Alert"
    ExternalBudgetAlert:
      type: object
      properties:
        forecastedDate:
          type: integer
          format: int64
        percentage:
          type: number
          format: double
        triggered:
          type: boolean
    ExternalConfig:
      type: object
      properties:
        metric:
          $ref: "#/components/schemas/ExternalMetric"
        metricFilter:
          $ref: "#/components/schemas/ExternalConfigMetricFilter"
        aggregation:
          type: string
          enum:
            - total
            - percent_total
            - percent_col
            - percent_row
        advancedAnalysis:
          $ref: "#/components/schemas/AdvancedAnalysis"
        timeInterval:
          type: string
          enum:
            - hour
            - day
            - dayCumSum
            - week
            - isoweek
            - month
            - quarter
            - year
            - week_day
        dimensions:
          description: See [Dimensions](https://help.doit.com/docs/cloud-analytics/reports/editing-your-cloud-report#dimensions).
          type: array
          items:
            $ref: "#/components/schemas/Dimension"
        timeRange:
          $ref: "#/components/schemas/TimeSettings"
        includePromotionalCredits:
          type: boolean
          description: |-
            Whether to include [promotional credits](https://help.doit.com/docs/cloud-analytics/reports/editing-your-cloud-report#promotional-credits).
            If set to **true**, the report must use time interval `month`, `quarter`, or `year`.
        includeSubtotals:
          type: boolean
          description: |-
            Whether to include subgroup totals in the report. This option has no impact when reading a report via API.
          default: false
        filters:
          type: array
          description: The filters to apply to the report.
          items:
            $ref: "#/components/schemas/ExternalConfigFilter"
        group:
          type: array
          description: |-
            The rows that appear in the tabular format of the report. See [Group by](https://help.doit.com/docs/cloud-analytics/reports/editing-your-cloud-report#group-by).
          items:
            $ref: "#/components/schemas/Group"
        layout:
          $ref: "#/components/schemas/ExternalRenderer"
        displayValues:
          type: string
          description: See [View data as (Comparative report)](https://help.doit.com/docs/cloud-analytics/reports/editing-your-cloud-report#view-as).
          enum:
            - actuals_only
            - absolute_change
            - percentage_change
            - absolute_and_percentage
        currency:
          $ref: "#/components/schemas/Currency"
        sortGroups:
          type: string
          default: asc
          enum:
            - asc
            - desc
            - a_to_z
          description: This option has no impact when reading reports via API.
        sortDimensions:
          type: string
          default: desc
          enum:
            - asc
            - desc
            - a_to_z
          description: This option has no impact when reading reports via API.
        dataSource:
          type: string
          description: Data source of the report.
          enum:
            - billing
            - bqlens
            - billing_datahub
            - kubernetes_utilization
        splits:
          type: array
          description: The splits to use in the report.
          items:
            $ref: "#/components/schemas/ExternalSplit"
        customTimeRange:
          description: Required when the time range is set to "custom".
          type: object
          properties:
            from:
              type: string
              format: date-time
              description: The start timestamp of the time range in RFC3339 format.
              example: "2024-03-10T23:00:00Z"
            to:
              type: string
              format: date-time
              description: The end timestamp of the time range in RFC3339 format.
              example: "2024-03-12T23:00:00Z"
      description: Report configuration
      example:
        metric:
          type: basic
          value: cost
        metricFilter:
          metric:
            type: basic
            value: cost
          operator: nb
          values:
            - -1
            - 1
        aggregation: total
        advancedAnalysis:
          forecast: false
          notTrending: false
          trendingDown: false
          trendingUp: false
        timeInterval: month
        dimensions:
          - id: year
            type: datetime
          - id: month
            type: datetime
        timeRange:
          amount: 3
          includeCurrent: false
          mode: last
          unit: month
        includePromotionalCredits: false
        includeSubtotals: false
        filters:
          - id: attribution
            type: attribution
            values:
              - RB8DndcxODriK83IBXXf
              - D7r4znsTj2UC95zGnunW
            inverse: true
          - id: cloud_provider
            type: fixed
            values:
              - amazon-web-services
              - google-cloud
              - microsoft-azure
        group:
          - id: service_description
            limit:
              metric:
                type: basic
                value: cost
              sort: a_to_z
              value: 0
            type: fixed
        layout: table
        displayValues: actuals_only
        currency: USD
        sortGroups: a_to_z
        sortDimensions: a_to_z
        dataSource: billing
    ExternalConfigFilter:
      description: |-
        To filter or exclude certain values by type.
        When using attributions as a filter, both the type and the ID must be "attribution", and the values array contains the attribution IDs.
      type: object
      properties:
        id:
          type: string
          description: The field to filter on
        type:
          type: string
          enum:
            - datetime
            - fixed
            - optional
            - label
            - tag
            - project_label
            - system_label
            - attribution
            - attribution_group
            - gke
            - gke_label
        inverse:
          type: boolean
          description: Set to `true` to exclude the values.
        values:
          type: array
          description: Values to filter on
          items:
            type: string
      example:
        id: cloud_provider
        type: fixed
        inverse: false
        values:
          - google-cloud
    ExternalConfigMetricFilter:
      description: The metric filter to limit the report results by value
      type: object
      properties:
        metric:
          $ref: "#/components/schemas/ExternalMetric"
        operator:
          type: string
          enum:
            - gt
            - lt
            - lte
            - gte
            - b
            - nb
            - e
            - ne
        values:
          type: array
          items:
            type: number
            format: double
      example:
        metric:
          type: basic
          value: cost
        operator: gt
        values:
          - 50
    ExternalMetric:
      description: The metric to apply.
      type: object
      properties:
        type:
          type: string
          enum:
            - basic
            - custom
            - extended
        value:
          type: string
          description: >-
            For basic metrics, the value can be one of: ["cost", "usage",
            "savings"]

            If using custom metrics, the value must refer to an existing custom id.
      example:
        type: basic
        value: cost
    ExternalOrigin:
      type: object
      properties:
        id:
          type: string
          description: ID of the origin
        type:
          type: string
          description: |-
            Type of the origin.
            The only supported values at the moment: "attribution", "unallocated"
          example: "attribution"
          enum:
            - datetime
            - fixed
            - optional
            - label
            - tag
            - project_label
            - system_label
            - attribution
            - attribution_group
            - gke
            - gke_label
            - unallocated
    ExternalRenderer:
      type: string
      description: The visualization of the report.
      enum:
        - column_chart
        - stacked_column_chart
        - bar_chart
        - stacked_bar_chart
        - line_chart
        - spline_chart
        - area_chart
        - area_spline_chart
        - stacked_area_chart
        - treemap_chart
        - table
        - table_heatmap
        - table_row_heatmap
        - table_col_heatmap
        - csv_export
        - sheets_export
    ExternalReport:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          description: Report id.
        name:
          type: string
          description: Report name.
        description:
          type: string
          description: Report description.
        type:
          type: string
          description: Report type.
          enum:
            - custom
            - preset
            - managed
        config:
          $ref: "#/components/schemas/ExternalConfig"
    ExternalSplit:
      type: object
      properties:
        id:
          type: string
          description: ID of the field to split
        includeOrigin:
          type: boolean
          description: if set, include the origin
        mode:
          type: string
          enum:
            - even
            - custom
            - proportional
        origin:
          $ref: "#/components/schemas/ExternalOrigin"
        targets:
          type: array
          description: Targets for the split
          items:
            $ref: "#/components/schemas/ExternalSplitTarget"
        type:
          type: string
          description: |-
            Type of the split.
            The only supported value at the moment: "attribution_group"
          example: "attribution_group"
          enum:
            - datetime
            - fixed
            - optional
            - label
            - tag
            - project_label
            - system_label
            - attribution
            - attribution_group
            - gke
            - gke_label
      description: A cost split to apply to the report
    ExternalSplitTarget:
      type: object
      properties:
        id:
          type: string
          description: ID of the target
        type:
          type: string
          description: |-
            Type of the target.
            The only supported value at the moment: "attribution"
          example: "attribution"
          enum:
            - datetime
            - fixed
            - optional
            - label
            - tag
            - project_label
            - system_label
            - attribution
            - attribution_group
            - gke
            - gke_label
        value:
          type: number
          description:
            Percent of the target, represented in float format. E.g. 30% is
            0.3. Must be set only if Split Mode is custom.
          format: double
    ExternalUpdateReport:
      type: object
      properties:
        config:
          $ref: "#/components/schemas/ExternalConfig"
        description:
          type: string
          description: Report description
        name:
          type: string
          description: Report name
      example:
        config:
          timeRange:
            amount: 1
            includeCurrent: false
            mode: last
            unit: month
          timeInterval: week
        description: An update via API
        name: A new name
    GroupAllocation:
      type: object
      properties:
        id:
          type: string
          description: Allocation group ID
        name:
          type: string
          description: Allocation group name
        description:
          type: string
          description: Allocation group description
        timeCreated:
          type: integer
          description: The time when this allocation group was created (in UNIX timestamp).
          format: int64
        timeModified:
          type: integer
          description: Last time the allocation group was modified (in UNIX timestamp).
          format: int64
        rules:
          type: array
          description: List of allocation rules in this group
          items:
            $ref: "#/components/schemas/AllocationListItem"
        type:
          type: string
          description: Type of allocation (preset or custom)
        allocationType:
          type: string
          description: Type of allocation (group)
          enum:
            - group
        cloud:
          type: string
          description: Cloud doit
          nullable: true
        unallocatedCosts:
          type: string
          description: Custom label for any values that do not fit into attributions
          nullable: true
    GroupAllocationRequest:
      required:
        - name
        - rules
      type: object
      properties:
        name:
          type: string
          description: Allocation group name
        description:
          type: string
          description: Allocation group description
        rules:
          type: array
          description: Array of allocation rules for this group
          items:
            $ref: "#/components/schemas/GroupAllocationRule"
        unallocatedCosts:
          type: string
          description: Custom label for any values that do not fit into attributions
          nullable: true
    GroupAllocationRule:
      required:
        - action
      type: object
      properties:
        name:
          type: string
          description: Name for the allocation rule
        description:
          type: string
          description: Description for the allocation rule
        action:
          type: string
          description: Action to perform with this rule
          enum:
            - create
            - update
            - select
        id:
          type: string
          description: ID of existing allocation (required for 'update' or 'select' action)
        components:
          type: array
          description: List of allocation filter components (required for 'create' or 'update' action)
          items:
            $ref: "#/components/schemas/AllocationComponent"
        formula:
          type: string
          description: Formula for combining components (A is the first component, B is the second one, etc.)
          example: "A AND B"
    ResourcePermissionsResponse:
      type: object
      properties:
        id:
          type: string
          description: Resource id.
        name:
          type: string
          description: Resource name.
        description:
          type: string
          description: Resource description.
        createTime:
          type: integer
          description: The time when this resource was created, in milliseconds since the epoch.
          format: int64
        updateTime:
          type: integer
          description: The time when this resource was last updated, in milliseconds since the epoch.
          format: int64
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/ResourcePermission"
        public:
          type: string
          description: Type of permissions users in the entire organization have for this resource
          enum:
            - editor
            - viewer
          nullable: true
    ResourcePermission:
      type: object
      properties:
        user:
          type: string
          description: The email address of the user to whom the role is assigned.
        role:
          type: string
          description: The role assigned to the user, defining their level of access to the resource.
          enum:
            - owner
            - editor
            - viewer
    SingleAllocation:
      type: object
      properties:
        id:
          type: string
          description: Allocation ID
        name:
          type: string
          description: Allocation name
        description:
          type: string
          description: Allocation description
        type:
          type: string
          description: Type of allocation (preset or custom)
        allocationType:
          type: string
          description: Type of allocation (single)
          enum:
            - single
        createTime:
          type: integer
          description: The time when the allocation was created (in UNIX timestamp).
          format: int64
        updateTime:
          type: integer
          description: Last time the allocation was modified (in UNIX timestamp).
          format: int64
        anomalyDetection:
          type: boolean
          description: Whether anomaly detection is enabled for this allocation
        rule:
          $ref: "#/components/schemas/AllocationRule"
    SingleAllocationRequest:
      required:
        - name
        - rule
      type: object
      properties:
        name:
          type: string
          description: Allocation name
        description:
          type: string
          description: Allocation description
        rule:
          $ref: "#/components/schemas/AllocationRule"
    Filter:
      type: string
      description: >-
        An expression for filtering the results. The syntax is `key:[<value>]`. Multiple filters can be connected using a pipe |. See [Filters](https://developer.doit.com/docs/filters).
    Group:
      description: The dimension that defines a row in the report.
      type: object
      properties:
        id:
          type: string
          description: Dimension ID.
          example: service_description
        limit:
          $ref: "#/components/schemas/Limit"
        type:
          $ref: "#/components/schemas/DimensionsTypes"
      example:
        id: service_description
        type: fixed
        limit:
          value: 3
          sort: desc
          metric:
            type: basic
            value: cost
    InvoiceListItem:
      type: object
      properties:
        id:
          type: string
          description: Invoice number, identifying the invoice.
        invoiceDate:
          type: integer
          description:
            The time when this invoice was issued, in milliseconds since the
            epoch.
          format: int64
        platform:
          $ref: "#/components/schemas/InvoicePlatform"
        dueDate:
          type: integer
          description: The last day to pay the invoice, in milliseconds since the epoch
          format: int64
        status:
          type: string
          description: Status of the invoice
          enum:
            - OPEN
            - PAST DUE
            - PAID
        totalAmount:
          type: number
          description: Total invoiced amount
          format: double
        balanceAmount:
          type: number
          description: Invoice balance to be paid
          format: double
        currency:
          $ref: "#/components/schemas/Currency"
        url:
          type: string
          description: Link to [invoice details page](https://help.doit.com/docs/billing/invoices-and-payments/managing-invoices) in the DoiT console. You can download the PDF invoice from the invoice details page.
    InvoicePlatform:
      type: string
      enum:
        - google-cloud
        - amazon-web-services
        - microsoft-azure
        - g-suite
        - office-365
        - superquery
        - looker
        - navigator
        - solve
    CloudIncidentListItem:
      type: object
      properties:
        createTime:
          type: integer
          description:
            The time when this cloud incident was created, in milliseconds since
            the epoch.
          format: int64
        id:
          type: string
          description: cloud incident id, uniquely identifying the cloud incident
        platform:
          type: string
          description: The cloud Platform
          enum:
            - google-cloud
            - amazon-web-services
            - microsoft-azure
        product:
          type: string
          description: The name of the product affected by the cloud incident
        status:
          type: string
          description: The Status of the issue
          enum:
            - active
            - archived
        title:
          type: string
          description: Cloud incident name as provided by cloud platform vendor
    Limit:
      type: object
      description: |-
        To limit the number of results based on ranking. See [Limit by top/bottom](https://help.doit.com/docs/cloud-analytics/reports/editing-your-cloud-report#limit-by-topbottom).
      properties:
        metric:
          $ref: "#/components/schemas/ExternalMetric"
        sort:
          type: string
          enum:
            - a_to_z
            - asc
            - desc
        value:
          type: integer
          description: The number of items to show
          format: int64
      example:
        value: 3
        sort: desc
        metric:
          type: basic
          value: cost
    ListItem:
      type: object
      properties:
        currency:
          type: string
        description:
          type: string
        details:
          type: string
        price:
          type: number
          format: double
        qty:
          type: number
          format: double
        type:
          type: string
    MetricConfig:
      type: object
      required:
        - type
        - value
      properties:
        type:
          $ref: "#/components/schemas/MetricType"
        value:
          type: string
    MetricFilterText:
      type: string
    MetricType:
      type: string
    ObjectType:
      type: string
    PlatformAPI:
      type: object
      properties:
        displayName:
          type: string
        id:
          type: string
    ProductAPI:
      type: object
      properties:
        displayName:
          type: string
        id:
          type: string
        platform:
          type: string
    Report:
      type: object
      properties:
        id:
          type: string
          description: Report id.
        reportName:
          type: string
          description: The name of the report.
        owner:
          type: string
          description: The report owner in a form of user@domain.com
        type:
          type: string
          enum:
            - custom
            - preset
        createTime:
          type: integer
          description:
            The time when the report was created, in milliseconds since the
            epoch.
          format: int64
        updateTime:
          type: integer
          description:
            The time when this report was last updated, in milliseconds since
            the epoch.
          format: int64
        urlUI:
          type: string
          description: The URL of the report in DoiT Cloud Navigator.
    ReportList:
      type: object
      properties:
        pageToken:
          type: string
          description: Page token. It is used to request a specific page of the list results.
        rowCount:
          type: integer
          description: The number of returned records.
          format: int64
          example: 5
        reports:
          type: array
          items:
            $ref: "#/components/schemas/Report"
    RunReportResult:
      type: object
      properties:
        result:
          type: object
          properties:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/SchemaField"
            mlFeatures:
              type: array
              items:
                type: string
                enum:
                  - increasing
                  - decreasing
                  - none
                  - forecast
            rows:
              type: array
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Value"
            forecastRows:
              type: array
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Value"
            cacheHit:
              type: boolean
              description: If set to true, results were fetched from the cache.
    SchemaField:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
    Scope:
      required:
        - key
        - type
      type: object
      properties:
        key:
          type: string
          example: service_id
          default: service_id
        type:
          $ref: "#/components/schemas/DimensionsTypes"
        values:
          type: array
          example:
            - google_cloud
          items:
            type: string
        inverse_selection:
          type: boolean
          description: If set to true, all the selected values will be excluded.
        regexp:
          type: string
        include_null:
          type: boolean
    SlackChannel:
      type: object
      properties:
        customerId:
          type: string
        id:
          type: string
        name:
          type: string
        shared:
          type: boolean
        type:
          type: string
        workspace:
          type: string
    SortableItem:
      type: object
      properties:
        GetID:
          type: string
    TimeSettings:
      type: object
      properties:
        amount:
          maximum: 5000
          minimum: 0
          type: integer
          format: int64
        includeCurrent:
          type: boolean
        mode:
          type: string
          enum:
            - last
            - current
            - custom
        unit:
          type: string
          enum:
            - day
            - week
            - month
            - quarter
            - year
      description: >-
        Specify a predefined or custom time range for the report.

        For example, to specify a custom time range of "last 2 days", set the mode to `last`, the amount to `2`, and the unit to `day`. If `includeCurrent` is `true`, the range will be yesterday and today; otherwise, the range will be yesterday and the day before yesterday.

        If "custom" type is specified, you need to provide a custom time range in the `customTimeRange` field.
      example:
        amount: 3
        includeCurrent: false
        mode: last
        unit: month
    ValidateResponse:
      type: object
      properties:
        domain:
          type: string
        email:
          type: string
    Value:
      description: The content of a single cell from a BigQuery result.
      type: object
    AssetItem:
      type: object
      properties:
        createTime:
          type: integer
          description: The time when the asset was created, in milliseconds since the epoch
          format: int64
        id:
          type: string
        name:
          type: string
        quantity:
          type: integer
          format: int64
        type:
          type: string
        url:
          type: string
    AssetProperties:
      type: object
      properties:
        customerDomain:
          type: string
        customerID:
          type: string
        reseller:
          type: string
        subscription:
          $ref: "#/components/schemas/Subscription"
    RenewalSettings:
      type: object
      properties:
        renewalType:
          type: string
    Seats:
      type: object
      properties:
        licensedNumberOfSeats:
          type: integer
          format: int64
        maximumNumberOfSeats:
          type: integer
          format: int64
        numberOfSeats:
          type: integer
          format: int64
    Subscription:
      type: object
      properties:
        billingMethod:
          type: string
        creationTime:
          type: integer
          format: int64
        id:
          type: string
        plan:
          $ref: "#/components/schemas/SubscriptionPlan"
        purchaseOrderID:
          type: string
        renewalSettings:
          $ref: "#/components/schemas/RenewalSettings"
        resourceUIURL:
          type: string
        seats:
          $ref: "#/components/schemas/Seats"
        skuID:
          type: string
        skuName:
          type: string
        status:
          type: string
    SubscriptionPlan:
      type: object
      properties:
        commitmentInterval:
          $ref: "#/components/schemas/SubscriptionPlanCommitmentInterval"
        isCommitmentPlan:
          type: boolean
        planName:
          type: string
    SubscriptionPlanCommitmentInterval:
      type: object
      properties:
        endTime:
          type: integer
          format: int64
        startTime:
          type: integer
          format: int64
    TicketCreateFormExtAPI:
      type: object
      x-cloudflow-labels:
        ticket: "Ticket details"
      properties:
        ticket:
          $ref: "#/components/schemas/TicketExtAPI"
      required:
        - ticket
    TicketExtAPI:
      type: object
      required:
        - body
        - platform
        - product
        - severity
        - subject
      properties:
        body:
          type: string
          description: The body of the ticket (can include html formatting)
          x-cloudflow-format: "multiReference"
        created:
          type: string
          description: Ticket create time
        platform:
          type: string
          description: Platform of the ticket
          enum:
            - doit
            - google_cloud_platform
            - amazon_web_services
            - microsoft_azure
        product:
          type: string
          description: Ticket product details
        severity:
          type: string
          description: Ticket severity
          enum:
            - low
            - normal
            - high
            - urgent
          x-cloudflow-format: "noReference"
        subject:
          type: string
          description: The subject of the ticket.
    TicketListItem:
      type: object
      properties:
        createTime:
          type: integer
          description:
            The time when this ticket was created, in milliseconds since the
            epoch.
          format: int64
        id:
          type: integer
          description: ticket id, identifying the report (e.g. "33234")
          format: int64
        is_public:
          type: boolean
          description: is ticket public
        platform:
          type: string
          description: platform of the ticket
          enum:
            - doit
            - google_cloud_platform
            - amazon_web_services
            - microsoft_azure
        product:
          type: string
          description: Ticket product
        requester:
          type: string
          description: The ticket requester in a form of user@domain.com
        severity:
          type: string
          description: Ticket severity
        status:
          type: string
          description: Ticket status
        subject:
          type: string
          description: The subject of the ticket.
        updateTime:
          type: integer
          description:
            The time when this ticket was last updated, in milliseconds since
            the epoch.
          format: int64
        urlUI:
          type: string
          description: Link to the report document in Cloud Management Platform
    TicketResponseExtAPI:
      type: object
      properties:
        created:
          type: integer
          description: ticket created time
          format: int64
        id:
          type: integer
          description: ID
          format: int64
        platform:
          type: string
          description: ticket platform
          enum:
            - doit
            - google_cloud_platform
            - amazon_web_services
            - microsoft_azure
        product:
          type: string
          description: ticket product
        requester:
          type: string
          description: ticket platform
          enum:
            - doit
            - google_cloud_platform
            - amazon_web_services
            - microsoft_azure
        severity:
          type: string
          description: update Severity field
          enum:
            - low
            - normal
            - high
            - urgent
        status:
          type: string
          description: ticket status
        subject:
          type: string
          description: ticket subject
        urlUI:
          type: string
          description: ticket URL
    TicketsList:
      type: object
      properties:
        pageToken:
          type: string
          description:
            Page token, returned by a previous call, to request the next page
            of results
        rowCount:
          type: integer
          description: Tickets rows count
          format: int64
        tickets:
          type: array
          items:
            $ref: "#/components/schemas/TicketListItem"
    ResourceReference:
      type: object
      properties:
        id:
          type: string
          description: Resource identifier
        name:
          type: string
          description: Resource name
        owner:
          type: string
          description: Resource owner (only present if requester doesn't have access)

    BlockingResources:
      type: object
      description: |
        Map of resources blocking the deletion. Only resource types that are blocking will be present in the response.
        For attribution group deletion, possible blocking resources are: budgets, alerts, reports.
        For attribution deletion, possible blocking resources are: budgets, alerts, reports, attributions, attributionGroups.
      properties:
        alerts:
          type: array
          description: List of alerts using this resource
          items:
            $ref: "#/components/schemas/ResourceReference"
        attributionGroups:
          type: array
          description: List of attribution groups using this resource (only applicable for attribution deletion)
          items:
            $ref: "#/components/schemas/ResourceReference"
        attributions:
          type: array
          description: List of attributions using this resource (only applicable for attribution deletion)
          items:
            $ref: "#/components/schemas/ResourceReference"
        budgets:
          type: array
          description: List of budgets using this resource
          items:
            $ref: "#/components/schemas/ResourceReference"
        reports:
          type: array
          description: List of reports using this resource
          items:
            $ref: "#/components/schemas/ResourceReference"
      example:
        budgets:
          - id: "budget-id"
            name: "Example Budget"

    AttributionGroupDeleteValidation:
      type: object
      properties:
        id:
          type: string
          description: ID of the attribution group that could not be deleted
        error:
          type: string
          description: Error message explaining why the deletion failed
          nullable: true
        resources:
          $ref: "#/components/schemas/BlockingResources"
      example:
        id: "attribution-group-id"
        error: null
        resources:
          budgets:
            - id: "budget-id"
              name: "Example Budget"

    AttributionDeleteValidation:
      type: object
      properties:
        id:
          type: string
          description: ID of the attribution that could not be deleted
        error:
          type: string
          description: Error message explaining why the deletion failed
          nullable: true
        resources:
          $ref: "#/components/schemas/BlockingResources"
      example:
        id: "attribution-id"
        error: null
        resources:
          budgets:
            - id: "budget-id"
              name: "Example Budget"
    Role:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the role
        name:
          type: string
          description: The name of the role
        type:
          type: string
          description: The type of the role (preset or custom)
        customer:
          type: string
          description: The customer ID if this is a custom role
        permissions:
          type: array
          description: List of permission IDs assigned to the role
          items:
            type: string
    Organization:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the organization
        name:
          type: string
          description: The name of the organization
    ListUsersResponseBody:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserListItem"
        rowCount:
          type: integer
          description: The number of returned records.
          format: int64
          example: 5
    InviteResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
        user:
          $ref: "#/components/schemas/InvitedUserBody"
    InvitedUserBody:
      type: object
      properties:
        id:
          type: string
          description: The unique id of the invited user
        email:
          type: string
          description: The email address of the invited user
        roleId:
          type: string
          description: The id of the role assigned to the user
        organizationId:
          type: string
          description: The id of the organization assigned to the user
        status:
          type: string
          description: The status of the user (invited)
          enum:
            - invited
  responses:
    "400":
      description: >-
        Bad Request - The server cannot process the request, often due to malformed request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "401":
      description: >-
        Unauthorized - Invalid API key.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "403":
      description: >-
        Forbidden - The client is not authorized to perform the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "404":
      description: >-
        Not Found - The requested resource does not exist.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "429":
      description: >-
        Too Many Requests.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "500":
      description: >-
        Internal Server Error - Something went wrong with the DoiT API server.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    TicketResponseExtAPI:
      description: Creates a new service or support request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TicketResponseExtAPI"
    TicketsList:
      description: Lists all historical requests the user has access to.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TicketsList"
    anomaliesResponse:
      description: Lists all available cloud cost anomalies
      content:
        application/json:
          schema:
            type: object
            properties:
              Report:
                $ref: "#/components/schemas/AnomaliesResponse"
    anomalyResponse:
      description: Returns cloud cost anomaly details based on anomalyId.
      content:
        application/json:
          schema:
            required:
              - attribution
              - billingAccount
              - costOfAnomaly
              - platform
              - scope
              - serviceName
              - severityLevel
              - startTime
              - timeFrame
              - top3SKUs
            type: object
            properties:
              attribution:
                type: string
                description: Attribution ID
              billingAccount:
                type: string
                description: Billing account ID
              costOfAnomaly:
                type: number
                description: Cost of the anomaly over and above the expected normal cost
                format: double
              platform:
                type: string
                description: Cloud Provider name
              scope:
                type: string
                description: "Scope: Project or Account"
              serviceName:
                type: string
                description: Service name
              severityLevel:
                type: string
                description: "Severity level: Information, Warning or Critical"
              startTime:
                type: integer
                description: Usage start time of the anomaly
                format: int64
              timeFrame:
                type: string
                description: "Timeframe: Daily or Hourly"
              top3SKUs:
                $ref: "#/components/schemas/AnomalySKUArray"
    assetPost:
      description: Creates a new amazon-web-services asset (account)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AssetResponse"
    attributionCreate:
      description: Id of the created attribution
      content:
        application/json:
          schema:
            type: string
    attributionDelete:
      description: Deletes the attribution specified by the attributionId value
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AttributionListItem"
    budgetDelete:
      description: Deletes the budget specified by the budgetId value
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Budget"
    budgetPatch:
      description: Updates information in an existing budget
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Budget"
    budgetPost:
      description: Creates a new budget
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Budget"
    createAlertSuccessResponse:
      description: Created Alert
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Alert"
    createAttributionGroupSuccess:
      description: Id of the created attribution group
      content: {}
    deleteAlertSuccessResponse:
      description: Delete Alert
      content: {}
    deleteAttributionGroupSuccess:
      description: Deletes the attribution group specified by the id value
      content: {}
    getAlertSuccessResponse:
      description: Get Alert by the specified Id
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Alert"
    getAttributionGroupSuccess:
      description: Gets the attribution group specified by the id value
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AttributionGroupGetExternal"
    internalServerError:
      description: Error InternalServerError
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Detailed error message
    listAccountTeamSuccess:
      description: List all DoiT account managers assigned to the customer
      content:
        application/json:
          schema:
            type: object
            properties:
              accountManagers:
                type: array
                items:
                  $ref: "#/components/schemas/AccountManagerListItem"
    listAlertsSuccessResponse:
      description: Lists alerts available for the user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ExternalAlertList"
    listAttributionGroupsSuccessResponse:
      description: Lists attribution groups available for the user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AttributionGroupsListExternal"
    listPlatformsSuccess:
      description: Lists platforms available to the user
      content:
        application/json:
          schema:
            type: object
            properties:
              platforms:
                type: array
                items:
                  $ref: "#/components/schemas/PlatformAPI"
    listProductsSuccess:
      description: List all products available for the specified platform.
      content:
        application/json:
          schema:
            type: object
            properties:
              products:
                type: array
                items:
                  $ref: "#/components/schemas/ProductAPI"
    successGetDimensionsResponse:
      description: Gets the dimension with the given type and key values
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DimensionsExternalAPIGetResponse"
    successListDimensionsResponse:
      description: Lists dimensions available for the user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DimensionsExternalAPIList"
    successRespWithAsset:
      description: Updates existing asset to add or remove licenses
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              properties:
                $ref: "#/components/schemas/AssetProperties"
              type:
                type: string
    successRespWithAssets:
      description: Lists all available customer assets
      content:
        application/json:
          schema:
            type: object
            properties:
              assets:
                type: array
                description: Array of Assets
                items:
                  $ref: "#/components/schemas/AssetItem"
              pageToken:
                type: string
                description:
                  Page token, returned by a previous call, to request the next page
                  of results
              rowCount:
                type: integer
                description: Assets rows count
                format: int64
    successRespWithAttribution:
      description: Gets the attribution specified by the attributionId value
      content:
        application/json:
          schema:
            type: object
            properties:
              Attribution:
                $ref: "#/components/schemas/AttributionAPI"
    successRespWithAttributions:
      description: Lists attributions available for the user
      content:
        application/json:
          schema:
            type: object
            properties:
              Attributions:
                $ref: "#/components/schemas/AttributionListItem"
    successRespWithBudget:
      description: Returns budget details based on budgetId
      content:
        application/json:
          schema:
            type: object
            properties:
              Budget:
                $ref: "#/components/schemas/BudgetAPI"
    successRespWithBudgets:
      description: Lists cloud budgets available for the user
      content:
        application/json:
          schema:
            type: object
            properties:
              budgets:
                type: array
                description: Array of Budgets
                items:
                  $ref: "#/components/schemas/BudgetListItem"
              pageToken:
                type: string
                description:
                  Page token, returned by a previous call, to request the next page
                  of results
              rowCount:
                type: integer
                description: Budgets rows count
                format: int64
    successRespWithInvoice:
      description: Return invoice details by invoiceId
      content:
        application/json:
          schema:
            type: object
            properties:
              balanceAmount:
                type: number
                description: invoice balance to be paid
                format: double
              currency:
                type: string
                description: Invoice currency, can be USD, GBP, AUD, EUR, ILS, CAD, DKK, NOK, SEK, BRL, SGD, MXN, CHF, MYR, TWD, EGP, ZAR, JPY, IDR, AED, COP, THB
              dueDate:
                type: integer
                description: due date, in milliseconds since the epoch.
                format: int64
              id:
                type: string
                description: invoice number, identifying the invoice (e.g. "IN204005474")
              invoiceDate:
                type: integer
                description:
                  The time when this invoice was issued, in milliseconds since the
                  epoch.
                format: int64
              lineItems:
                type: array
                description: Invoice line items
                items:
                  $ref: "#/components/schemas/ListItem"
              platform:
                type: string
                description:
                  Platform can be "google-cloud", "amazon-web-services",
                  "microsoft-azure", "g-suite", "office-365", "superquery"
              status:
                type: string
                description: can be either OPEN, PAST DUE, or PAID
              totalAmount:
                type: number
                description: total invoiced amount
                format: double
              url:
                type: string
                description: link to the downloadable document
    successRespWithInvoices:
      description: Lists all available invoices
      content:
        application/json:
          schema:
            type: object
            properties:
              invoices:
                type: array
                description: Array of Invoices
                items:
                  $ref: "#/components/schemas/InvoiceListItem"
              pageToken:
                type: string
                description:
                  Page token, returned by a previous call, to request the next page
                  of results
              rowCount:
                type: integer
                description: Invoices rows count
                format: int64
    successRespWithKnownIssue:
      description: Returns the cloud incident specified by the id
      content:
        application/json:
          schema:
            type: object
            properties:
              createTime:
                type: integer
                description:
                  The time when this cloud incident was created, in milliseconds since
                  the epoch.
                format: int64
              description:
                type: string
                description: Detailed explanation on the cloud incident.
              id:
                type: string
                description: cloud incident id, uniquely identifying the cloud incident
              platform:
                type: string
                description: The cloud Platform
                enum:
                  - google-cloud
                  - amazon-web-services
                  - microsoft-azure
              product:
                type: string
                description: The name of the product affected by the cloud incident
              status:
                type: string
                description: The Status of the issue
                enum:
                  - active
                  - archived
              summary:
                type: string
                description: cloud incident description in a summarised form
              symptoms:
                type: string
                description: Cloud incident symptoms, if available
              title:
                type: string
                description: Cloud incident name as provided by cloud platform vendor
              workaround:
                type: string
                description: Mitigation workaround for the cloud incident, if available.
    successRespWithKnownIssues:
      description: Lists all cloud infrastructure cloud incidents
      content:
        application/json:
          schema:
            type: object
            properties:
              incidents:
                type: array
                description: Array of cloud incidents
                items:
                  $ref: "#/components/schemas/CloudIncidentListItem"
              pageToken:
                type: string
                description:
                  Page token, returned by a previous call, to request the next page
                  of results
              rowCount:
                type: integer
                description: Cloud incidents rows count
                format: int64
    successRespWithReport:
      description: Returns cloud analytics report results, based on reportId
      content:
        application/json:
          schema:
            type: object
            properties:
              Report:
                $ref: "#/components/schemas/Report"
    updateAlertSuccessResponse:
      description: Updated Alert
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Alert"
    updateAttributionGroupSuccess:
      description: ""
      content: {}
    validateUserSuccess:
      description: Returns the domain and email of the API user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidateResponse"
  parameters:
    maxResults:
      name: maxResults
      in: query
      description: >-
        The maximum number of results to return in a single page. Leverage the page tokens to iterate through the entire collection.
      schema:
        type: string
        default: "500"
    pageToken:
      name: pageToken
      in: query
      description: Page token, returned by a previous call, to request the next page   of results
      schema:
        type: string
    reportId:
      name: id
      in: path
      description: Report ID. See [Resource IDs](https://developer.doit.com/docs/resource-ids).
      required: true
      schema:
        type: string
    sortOrder:
      name: sortOrder
      in: query
      description: Sort order can be ascending or descending.
      schema:
        type: string
        enum:
          - asc
          - desc
    resourceType:
      name: resourceType
      in: path
      description: Resource type.
      required: true
      schema:
        type: string
        enum:
          - alerts
          - attributions
          - attributiongroups
          - budgets
          - reports
          - allocations
    resourceId:
      name: resourceId
      in: path
      description: Resource ID. See [Resource IDs](https://developer.doit.com/docs/resource-ids).
      required: true
      schema:
        type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      description: Use the "Bearer <API_KEY>" format or sign in for autofill
      in: header
    customerContext:
      type: apiKey
      name: customerContext
      in: query
x-samples-languages:
  - curl
  - go
  - node
  - python
