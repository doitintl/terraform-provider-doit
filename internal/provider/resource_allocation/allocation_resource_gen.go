// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_allocation

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func AllocationResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"allocation_type": schema.StringAttribute{
				Computed:            true,
				Description:         "Type of the created allocation",
				MarkdownDescription: "Type of the created allocation",
			},
			"anomaly_detection": schema.BoolAttribute{
				Computed:            true,
				Description:         "Whether anomaly detection is enabled for this allocation",
				MarkdownDescription: "Whether anomaly detection is enabled for this allocation",
			},
			"create_time": schema.Int64Attribute{
				Computed:            true,
				Description:         "The time when the allocation was created (in UNIX timestamp).",
				MarkdownDescription: "The time when the allocation was created (in UNIX timestamp).",
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Allocation description",
				MarkdownDescription: "Allocation description",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "ID of the created allocation",
				MarkdownDescription: "ID of the created allocation",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Allocation name",
				MarkdownDescription: "Allocation name",
			},
			"rule": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"components": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"include_null": schema.BoolAttribute{
									Optional:            true,
									Computed:            true,
									Description:         "Include null values",
									MarkdownDescription: "Include null values",
									Default:             booldefault.StaticBool(false),
								},
								"inverse_selection": schema.BoolAttribute{
									Optional:            true,
									Computed:            true,
									Description:         "If true, all selected values will be excluded.",
									MarkdownDescription: "If true, all selected values will be excluded.",
									Default:             booldefault.StaticBool(false),
								},
								"key": schema.StringAttribute{
									Required:            true,
									Description:         "Key of a dimension. Examples: \"billing_account_id\", \"country\", etc.",
									MarkdownDescription: "Key of a dimension. Examples: \"billing_account_id\", \"country\", etc.",
								},
								"mode": schema.StringAttribute{
									Required:            true,
									Description:         "Filter mode to apply",
									MarkdownDescription: "Filter mode to apply",
									Validators: []validator.String{
										stringvalidator.OneOf(
											"is",
											"starts_with",
											"ends_with",
											"contains",
											"regexp",
										),
									},
								},
								"type": schema.StringAttribute{
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"datetime",
											"fixed",
											"optional",
											"label",
											"tag",
											"project_label",
											"system_label",
											"attribution",
											"attribution_group",
											"gke",
											"gke_label",
										),
									},
								},
								"values": schema.ListAttribute{
									ElementType: types.StringType,
									Required:    true,
								},
							},
							CustomType: ComponentsType{
								ObjectType: types.ObjectType{
									AttrTypes: ComponentsValue{}.AttributeTypes(ctx),
								},
							},
						},
						Optional:            true,
						Computed:            true,
						Description:         "List of allocation filter components",
						MarkdownDescription: "List of allocation filter components",
					},
					"formula": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Formula for combining components (A is the first component, B is the second one, etc.)",
						MarkdownDescription: "Formula for combining components (A is the first component, B is the second one, etc.)",
					},
				},
				CustomType: RuleType{
					ObjectType: types.ObjectType{
						AttrTypes: RuleValue{}.AttributeTypes(ctx),
					},
				},
				Required: true,
			},
			"type": schema.StringAttribute{
				Computed:            true,
				Description:         "Type of allocation (preset or custom)",
				MarkdownDescription: "Type of allocation (preset or custom)",
			},
			"update_time": schema.Int64Attribute{
				Computed:            true,
				Description:         "Last time the allocation was modified (in UNIX timestamp).",
				MarkdownDescription: "Last time the allocation was modified (in UNIX timestamp).",
			},
		},
	}
}

type AllocationModel struct {
	AllocationType   types.String `tfsdk:"allocation_type"`
	AnomalyDetection types.Bool   `tfsdk:"anomaly_detection"`
	CreateTime       types.Int64  `tfsdk:"create_time"`
	Description      types.String `tfsdk:"description"`
	Id               types.String `tfsdk:"id"`
	Name             types.String `tfsdk:"name"`
	Rule             RuleValue    `tfsdk:"rule"`
	Type             types.String `tfsdk:"type"`
	UpdateTime       types.Int64  `tfsdk:"update_time"`
}

var _ basetypes.ObjectTypable = RuleType{}

type RuleType struct {
	basetypes.ObjectType
}

func (t RuleType) Equal(o attr.Type) bool {
	other, ok := o.(RuleType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RuleType) String() string {
	return "RuleType"
}

func (t RuleType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	componentsAttribute, ok := attributes["components"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`components is missing from object`)

		return nil, diags
	}

	componentsVal, ok := componentsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`components expected to be basetypes.ListValue, was: %T`, componentsAttribute))
	}

	formulaAttribute, ok := attributes["formula"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`formula is missing from object`)

		return nil, diags
	}

	formulaVal, ok := formulaAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`formula expected to be basetypes.StringValue, was: %T`, formulaAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RuleValue{
		Components: componentsVal,
		Formula:    formulaVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewRuleValueNull() RuleValue {
	return RuleValue{
		state: attr.ValueStateNull,
	}
}

func NewRuleValueUnknown() RuleValue {
	return RuleValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRuleValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RuleValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RuleValue Attribute Value",
				"While creating a RuleValue value, a missing attribute value was detected. "+
					"A RuleValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RuleValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RuleValue Attribute Type",
				"While creating a RuleValue value, an invalid attribute value was detected. "+
					"A RuleValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RuleValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RuleValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RuleValue Attribute Value",
				"While creating a RuleValue value, an extra attribute value was detected. "+
					"A RuleValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RuleValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRuleValueUnknown(), diags
	}

	componentsAttribute, ok := attributes["components"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`components is missing from object`)

		return NewRuleValueUnknown(), diags
	}

	componentsVal, ok := componentsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`components expected to be basetypes.ListValue, was: %T`, componentsAttribute))
	}

	formulaAttribute, ok := attributes["formula"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`formula is missing from object`)

		return NewRuleValueUnknown(), diags
	}

	formulaVal, ok := formulaAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`formula expected to be basetypes.StringValue, was: %T`, formulaAttribute))
	}

	if diags.HasError() {
		return NewRuleValueUnknown(), diags
	}

	return RuleValue{
		Components: componentsVal,
		Formula:    formulaVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewRuleValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RuleValue {
	object, diags := NewRuleValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRuleValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RuleType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRuleValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRuleValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRuleValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRuleValueMust(RuleValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RuleType) ValueType(ctx context.Context) attr.Value {
	return RuleValue{}
}

var _ basetypes.ObjectValuable = RuleValue{}

type RuleValue struct {
	Components basetypes.ListValue   `tfsdk:"components"`
	Formula    basetypes.StringValue `tfsdk:"formula"`
	state      attr.ValueState
}

func (v RuleValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["components"] = basetypes.ListType{
		ElemType: ComponentsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["formula"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Components.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["components"] = val

		val, err = v.Formula.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["formula"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RuleValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RuleValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RuleValue) String() string {
	return "RuleValue"
}

func (v RuleValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	components := types.ListValueMust(
		ComponentsType{
			basetypes.ObjectType{
				AttrTypes: ComponentsValue{}.AttributeTypes(ctx),
			},
		},
		v.Components.Elements(),
	)

	if v.Components.IsNull() {
		components = types.ListNull(
			ComponentsType{
				basetypes.ObjectType{
					AttrTypes: ComponentsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Components.IsUnknown() {
		components = types.ListUnknown(
			ComponentsType{
				basetypes.ObjectType{
					AttrTypes: ComponentsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"components": basetypes.ListType{
			ElemType: ComponentsValue{}.Type(ctx),
		},
		"formula": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"components": components,
			"formula":    v.Formula,
		})

	return objVal, diags
}

func (v RuleValue) Equal(o attr.Value) bool {
	other, ok := o.(RuleValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Components.Equal(other.Components) {
		return false
	}

	if !v.Formula.Equal(other.Formula) {
		return false
	}

	return true
}

func (v RuleValue) Type(ctx context.Context) attr.Type {
	return RuleType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RuleValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"components": basetypes.ListType{
			ElemType: ComponentsValue{}.Type(ctx),
		},
		"formula": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = ComponentsType{}

type ComponentsType struct {
	basetypes.ObjectType
}

func (t ComponentsType) Equal(o attr.Type) bool {
	other, ok := o.(ComponentsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ComponentsType) String() string {
	return "ComponentsType"
}

func (t ComponentsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	includeNullAttribute, ok := attributes["include_null"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include_null is missing from object`)

		return nil, diags
	}

	includeNullVal, ok := includeNullAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include_null expected to be basetypes.BoolValue, was: %T`, includeNullAttribute))
	}

	inverseSelectionAttribute, ok := attributes["inverse_selection"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`inverse_selection is missing from object`)

		return nil, diags
	}

	inverseSelectionVal, ok := inverseSelectionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`inverse_selection expected to be basetypes.BoolValue, was: %T`, inverseSelectionAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return nil, diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	valuesAttribute, ok := attributes["values"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`values is missing from object`)

		return nil, diags
	}

	valuesVal, ok := valuesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`values expected to be basetypes.ListValue, was: %T`, valuesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ComponentsValue{
		IncludeNull:      includeNullVal,
		InverseSelection: inverseSelectionVal,
		Key:              keyVal,
		Mode:             modeVal,
		ComponentsType:   typeVal,
		Values:           valuesVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewComponentsValueNull() ComponentsValue {
	return ComponentsValue{
		state: attr.ValueStateNull,
	}
}

func NewComponentsValueUnknown() ComponentsValue {
	return ComponentsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewComponentsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ComponentsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ComponentsValue Attribute Value",
				"While creating a ComponentsValue value, a missing attribute value was detected. "+
					"A ComponentsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ComponentsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ComponentsValue Attribute Type",
				"While creating a ComponentsValue value, an invalid attribute value was detected. "+
					"A ComponentsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ComponentsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ComponentsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ComponentsValue Attribute Value",
				"While creating a ComponentsValue value, an extra attribute value was detected. "+
					"A ComponentsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ComponentsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewComponentsValueUnknown(), diags
	}

	includeNullAttribute, ok := attributes["include_null"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include_null is missing from object`)

		return NewComponentsValueUnknown(), diags
	}

	includeNullVal, ok := includeNullAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include_null expected to be basetypes.BoolValue, was: %T`, includeNullAttribute))
	}

	inverseSelectionAttribute, ok := attributes["inverse_selection"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`inverse_selection is missing from object`)

		return NewComponentsValueUnknown(), diags
	}

	inverseSelectionVal, ok := inverseSelectionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`inverse_selection expected to be basetypes.BoolValue, was: %T`, inverseSelectionAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewComponentsValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return NewComponentsValueUnknown(), diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewComponentsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	valuesAttribute, ok := attributes["values"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`values is missing from object`)

		return NewComponentsValueUnknown(), diags
	}

	valuesVal, ok := valuesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`values expected to be basetypes.ListValue, was: %T`, valuesAttribute))
	}

	if diags.HasError() {
		return NewComponentsValueUnknown(), diags
	}

	return ComponentsValue{
		IncludeNull:      includeNullVal,
		InverseSelection: inverseSelectionVal,
		Key:              keyVal,
		Mode:             modeVal,
		ComponentsType:   typeVal,
		Values:           valuesVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewComponentsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ComponentsValue {
	object, diags := NewComponentsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewComponentsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ComponentsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewComponentsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewComponentsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewComponentsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewComponentsValueMust(ComponentsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ComponentsType) ValueType(ctx context.Context) attr.Value {
	return ComponentsValue{}
}

var _ basetypes.ObjectValuable = ComponentsValue{}

type ComponentsValue struct {
	IncludeNull      basetypes.BoolValue   `tfsdk:"include_null"`
	InverseSelection basetypes.BoolValue   `tfsdk:"inverse_selection"`
	Key              basetypes.StringValue `tfsdk:"key"`
	Mode             basetypes.StringValue `tfsdk:"mode"`
	ComponentsType   basetypes.StringValue `tfsdk:"type"`
	Values           basetypes.ListValue   `tfsdk:"values"`
	state            attr.ValueState
}

func (v ComponentsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["include_null"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["inverse_selection"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["values"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.IncludeNull.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["include_null"] = val

		val, err = v.InverseSelection.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["inverse_selection"] = val

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Mode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mode"] = val

		val, err = v.ComponentsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.Values.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["values"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ComponentsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ComponentsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ComponentsValue) String() string {
	return "ComponentsValue"
}

func (v ComponentsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var valuesVal basetypes.ListValue
	switch {
	case v.Values.IsUnknown():
		valuesVal = types.ListUnknown(types.StringType)
	case v.Values.IsNull():
		valuesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		valuesVal, d = types.ListValue(types.StringType, v.Values.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"include_null":      basetypes.BoolType{},
			"inverse_selection": basetypes.BoolType{},
			"key":               basetypes.StringType{},
			"mode":              basetypes.StringType{},
			"type":              basetypes.StringType{},
			"values": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"include_null":      basetypes.BoolType{},
		"inverse_selection": basetypes.BoolType{},
		"key":               basetypes.StringType{},
		"mode":              basetypes.StringType{},
		"type":              basetypes.StringType{},
		"values": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"include_null":      v.IncludeNull,
			"inverse_selection": v.InverseSelection,
			"key":               v.Key,
			"mode":              v.Mode,
			"type":              v.ComponentsType,
			"values":            valuesVal,
		})

	return objVal, diags
}

func (v ComponentsValue) Equal(o attr.Value) bool {
	other, ok := o.(ComponentsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IncludeNull.Equal(other.IncludeNull) {
		return false
	}

	if !v.InverseSelection.Equal(other.InverseSelection) {
		return false
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Mode.Equal(other.Mode) {
		return false
	}

	if !v.ComponentsType.Equal(other.ComponentsType) {
		return false
	}

	if !v.Values.Equal(other.Values) {
		return false
	}

	return true
}

func (v ComponentsValue) Type(ctx context.Context) attr.Type {
	return ComponentsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ComponentsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"include_null":      basetypes.BoolType{},
		"inverse_selection": basetypes.BoolType{},
		"key":               basetypes.StringType{},
		"mode":              basetypes.StringType{},
		"type":              basetypes.StringType{},
		"values": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}
