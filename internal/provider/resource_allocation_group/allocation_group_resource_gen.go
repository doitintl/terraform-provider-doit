// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_allocation_group

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func AllocationGroupResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"allocation_type": schema.StringAttribute{
				Computed:            true,
				Description:         "Type of the created allocation",
				MarkdownDescription: "Type of the created allocation",
			},
			"cloud": schema.StringAttribute{
				Computed:            true,
				Description:         "Cloud provider",
				MarkdownDescription: "Cloud provider",
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Allocation group description",
				MarkdownDescription: "Allocation group description",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "ID of the created allocation",
				MarkdownDescription: "ID of the created allocation",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Allocation group name",
				MarkdownDescription: "Allocation group name",
			},
			"rules": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"action": schema.StringAttribute{
							Required:            true,
							Description:         "Action to perform with this rule",
							MarkdownDescription: "Action to perform with this rule",
							Validators: []validator.String{
								stringvalidator.OneOf(
									"create",
									"update",
									"select",
								),
							},
						},
						"allocation_type": schema.StringAttribute{
							Computed:            true,
							Description:         "Type of allocation (single or group)",
							MarkdownDescription: "Type of allocation (single or group)",
						},
						"components": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"include_null": schema.BoolAttribute{
										Optional:            true,
										Computed:            true,
										Description:         "Include null values",
										MarkdownDescription: "Include null values",
										Default:             booldefault.StaticBool(false),
									},
									"inverse_selection": schema.BoolAttribute{
										Optional:            true,
										Computed:            true,
										Description:         "If true, all selected values will be excluded.",
										MarkdownDescription: "If true, all selected values will be excluded.",
										Default:             booldefault.StaticBool(false),
									},
									"key": schema.StringAttribute{
										Required:            true,
										Description:         "Key of a dimension. Examples: \"billing_account_id\", \"country\", etc.",
										MarkdownDescription: "Key of a dimension. Examples: \"billing_account_id\", \"country\", etc.",
									},
									"mode": schema.StringAttribute{
										Required:            true,
										Description:         "Filter mode to apply",
										MarkdownDescription: "Filter mode to apply",
										Validators: []validator.String{
											stringvalidator.OneOf(
												"is",
												"starts_with",
												"ends_with",
												"contains",
												"regexp",
											),
										},
									},
									"type": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"datetime",
												"fixed",
												"optional",
												"label",
												"tag",
												"project_label",
												"system_label",
												"attribution",
												"attribution_group",
												"gke",
												"gke_label",
											),
										},
									},
									"values": schema.ListAttribute{
										ElementType: types.StringType,
										Required:    true,
									},
								},
								CustomType: ComponentsType{
									ObjectType: types.ObjectType{
										AttrTypes: ComponentsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Optional:            true,
							Computed:            true,
							Description:         "List of allocation filter components (required for 'create' or 'update' action)",
							MarkdownDescription: "List of allocation filter components (required for 'create' or 'update' action)",
						},
						"create_time": schema.Int64Attribute{
							Computed:            true,
							Description:         "The time when the allocation was created (in UNIX timestamp).",
							MarkdownDescription: "The time when the allocation was created (in UNIX timestamp).",
						},
						"description": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Description for the allocation rule",
							MarkdownDescription: "Description for the allocation rule",
						},
						"formula": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Formula for combining components (A is the first component, B is the second one, etc.)",
							MarkdownDescription: "Formula for combining components (A is the first component, B is the second one, etc.)",
						},
						"id": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "ID of existing allocation (required for 'update' or 'select' action)",
							MarkdownDescription: "ID of existing allocation (required for 'update' or 'select' action)",
						},
						"name": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Name for the allocation rule",
							MarkdownDescription: "Name for the allocation rule",
						},
						"owner": schema.StringAttribute{
							Computed:            true,
							Description:         "Allocation owner",
							MarkdownDescription: "Allocation owner",
						},
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "Type of allocation (preset or custom)",
							MarkdownDescription: "Type of allocation (preset or custom)",
						},
						"update_time": schema.Int64Attribute{
							Computed:            true,
							Description:         "Last time the allocation was modified (in UNIX timestamp).",
							MarkdownDescription: "Last time the allocation was modified (in UNIX timestamp).",
						},
						"url_ui": schema.StringAttribute{
							Computed:            true,
							Description:         "URL to view the allocation in DoiT Cloud Navigator.",
							MarkdownDescription: "URL to view the allocation in DoiT Cloud Navigator.",
						},
					},
					CustomType: RulesType{
						ObjectType: types.ObjectType{
							AttrTypes: RulesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "Array of allocation rules for this group",
				MarkdownDescription: "Array of allocation rules for this group",
			},
			"time_created": schema.Int64Attribute{
				Computed:            true,
				Description:         "The time when this allocation group was created (in UNIX timestamp).",
				MarkdownDescription: "The time when this allocation group was created (in UNIX timestamp).",
			},
			"time_modified": schema.Int64Attribute{
				Computed:            true,
				Description:         "Last time the allocation group was modified (in UNIX timestamp).",
				MarkdownDescription: "Last time the allocation group was modified (in UNIX timestamp).",
			},
			"type": schema.StringAttribute{
				Computed:            true,
				Description:         "Type of allocation (preset or custom)",
				MarkdownDescription: "Type of allocation (preset or custom)",
			},
			"unallocated_costs": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Custom label for any values that do not fit into attributions",
				MarkdownDescription: "Custom label for any values that do not fit into attributions",
			},
		},
	}
}

type AllocationGroupModel struct {
	AllocationType   types.String `tfsdk:"allocation_type"`
	Cloud            types.String `tfsdk:"cloud"`
	Description      types.String `tfsdk:"description"`
	Id               types.String `tfsdk:"id"`
	Name             types.String `tfsdk:"name"`
	Rules            types.List   `tfsdk:"rules"`
	TimeCreated      types.Int64  `tfsdk:"time_created"`
	TimeModified     types.Int64  `tfsdk:"time_modified"`
	Type             types.String `tfsdk:"type"`
	UnallocatedCosts types.String `tfsdk:"unallocated_costs"`
}

var _ basetypes.ObjectTypable = RulesType{}

type RulesType struct {
	basetypes.ObjectType
}

func (t RulesType) Equal(o attr.Type) bool {
	other, ok := o.(RulesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RulesType) String() string {
	return "RulesType"
}

func (t RulesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	actionAttribute, ok := attributes["action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`action is missing from object`)

		return nil, diags
	}

	actionVal, ok := actionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`action expected to be basetypes.StringValue, was: %T`, actionAttribute))
	}

	allocationTypeAttribute, ok := attributes["allocation_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allocation_type is missing from object`)

		return nil, diags
	}

	allocationTypeVal, ok := allocationTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allocation_type expected to be basetypes.StringValue, was: %T`, allocationTypeAttribute))
	}

	componentsAttribute, ok := attributes["components"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`components is missing from object`)

		return nil, diags
	}

	componentsVal, ok := componentsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`components expected to be basetypes.ListValue, was: %T`, componentsAttribute))
	}

	createTimeAttribute, ok := attributes["create_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`create_time is missing from object`)

		return nil, diags
	}

	createTimeVal, ok := createTimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`create_time expected to be basetypes.Int64Value, was: %T`, createTimeAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	formulaAttribute, ok := attributes["formula"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`formula is missing from object`)

		return nil, diags
	}

	formulaVal, ok := formulaAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`formula expected to be basetypes.StringValue, was: %T`, formulaAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	ownerAttribute, ok := attributes["owner"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`owner is missing from object`)

		return nil, diags
	}

	ownerVal, ok := ownerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`owner expected to be basetypes.StringValue, was: %T`, ownerAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	updateTimeAttribute, ok := attributes["update_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`update_time is missing from object`)

		return nil, diags
	}

	updateTimeVal, ok := updateTimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`update_time expected to be basetypes.Int64Value, was: %T`, updateTimeAttribute))
	}

	urlUiAttribute, ok := attributes["url_ui"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url_ui is missing from object`)

		return nil, diags
	}

	urlUiVal, ok := urlUiAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url_ui expected to be basetypes.StringValue, was: %T`, urlUiAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RulesValue{
		Action:         actionVal,
		AllocationType: allocationTypeVal,
		Components:     componentsVal,
		CreateTime:     createTimeVal,
		Description:    descriptionVal,
		Formula:        formulaVal,
		Id:             idVal,
		Name:           nameVal,
		Owner:          ownerVal,
		RulesType:      typeVal,
		UpdateTime:     updateTimeVal,
		UrlUi:          urlUiVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewRulesValueNull() RulesValue {
	return RulesValue{
		state: attr.ValueStateNull,
	}
}

func NewRulesValueUnknown() RulesValue {
	return RulesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRulesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RulesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RulesValue Attribute Value",
				"While creating a RulesValue value, a missing attribute value was detected. "+
					"A RulesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RulesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RulesValue Attribute Type",
				"While creating a RulesValue value, an invalid attribute value was detected. "+
					"A RulesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RulesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RulesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RulesValue Attribute Value",
				"While creating a RulesValue value, an extra attribute value was detected. "+
					"A RulesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RulesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRulesValueUnknown(), diags
	}

	actionAttribute, ok := attributes["action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`action is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	actionVal, ok := actionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`action expected to be basetypes.StringValue, was: %T`, actionAttribute))
	}

	allocationTypeAttribute, ok := attributes["allocation_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allocation_type is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	allocationTypeVal, ok := allocationTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allocation_type expected to be basetypes.StringValue, was: %T`, allocationTypeAttribute))
	}

	componentsAttribute, ok := attributes["components"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`components is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	componentsVal, ok := componentsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`components expected to be basetypes.ListValue, was: %T`, componentsAttribute))
	}

	createTimeAttribute, ok := attributes["create_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`create_time is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	createTimeVal, ok := createTimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`create_time expected to be basetypes.Int64Value, was: %T`, createTimeAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	formulaAttribute, ok := attributes["formula"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`formula is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	formulaVal, ok := formulaAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`formula expected to be basetypes.StringValue, was: %T`, formulaAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	ownerAttribute, ok := attributes["owner"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`owner is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	ownerVal, ok := ownerAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`owner expected to be basetypes.StringValue, was: %T`, ownerAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	updateTimeAttribute, ok := attributes["update_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`update_time is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	updateTimeVal, ok := updateTimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`update_time expected to be basetypes.Int64Value, was: %T`, updateTimeAttribute))
	}

	urlUiAttribute, ok := attributes["url_ui"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url_ui is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	urlUiVal, ok := urlUiAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url_ui expected to be basetypes.StringValue, was: %T`, urlUiAttribute))
	}

	if diags.HasError() {
		return NewRulesValueUnknown(), diags
	}

	return RulesValue{
		Action:         actionVal,
		AllocationType: allocationTypeVal,
		Components:     componentsVal,
		CreateTime:     createTimeVal,
		Description:    descriptionVal,
		Formula:        formulaVal,
		Id:             idVal,
		Name:           nameVal,
		Owner:          ownerVal,
		RulesType:      typeVal,
		UpdateTime:     updateTimeVal,
		UrlUi:          urlUiVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewRulesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RulesValue {
	object, diags := NewRulesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRulesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RulesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRulesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRulesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRulesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRulesValueMust(RulesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RulesType) ValueType(ctx context.Context) attr.Value {
	return RulesValue{}
}

var _ basetypes.ObjectValuable = RulesValue{}

type RulesValue struct {
	Action         basetypes.StringValue `tfsdk:"action"`
	AllocationType basetypes.StringValue `tfsdk:"allocation_type"`
	Components     basetypes.ListValue   `tfsdk:"components"`
	CreateTime     basetypes.Int64Value  `tfsdk:"create_time"`
	Description    basetypes.StringValue `tfsdk:"description"`
	Formula        basetypes.StringValue `tfsdk:"formula"`
	Id             basetypes.StringValue `tfsdk:"id"`
	Name           basetypes.StringValue `tfsdk:"name"`
	Owner          basetypes.StringValue `tfsdk:"owner"`
	RulesType      basetypes.StringValue `tfsdk:"type"`
	UpdateTime     basetypes.Int64Value  `tfsdk:"update_time"`
	UrlUi          basetypes.StringValue `tfsdk:"url_ui"`
	state          attr.ValueState
}

func (v RulesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 12)

	var val tftypes.Value
	var err error

	attrTypes["action"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["allocation_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["components"] = basetypes.ListType{
		ElemType: ComponentsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["create_time"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["formula"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["owner"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["update_time"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["url_ui"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 12)

		val, err = v.Action.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["action"] = val

		val, err = v.AllocationType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allocation_type"] = val

		val, err = v.Components.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["components"] = val

		val, err = v.CreateTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["create_time"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Formula.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["formula"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Owner.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["owner"] = val

		val, err = v.RulesType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.UpdateTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["update_time"] = val

		val, err = v.UrlUi.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url_ui"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RulesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RulesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RulesValue) String() string {
	return "RulesValue"
}

func (v RulesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	components := types.ListValueMust(
		ComponentsType{
			basetypes.ObjectType{
				AttrTypes: ComponentsValue{}.AttributeTypes(ctx),
			},
		},
		v.Components.Elements(),
	)

	if v.Components.IsNull() {
		components = types.ListNull(
			ComponentsType{
				basetypes.ObjectType{
					AttrTypes: ComponentsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Components.IsUnknown() {
		components = types.ListUnknown(
			ComponentsType{
				basetypes.ObjectType{
					AttrTypes: ComponentsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"action":          basetypes.StringType{},
		"allocation_type": basetypes.StringType{},
		"components": basetypes.ListType{
			ElemType: ComponentsValue{}.Type(ctx),
		},
		"create_time": basetypes.Int64Type{},
		"description": basetypes.StringType{},
		"formula":     basetypes.StringType{},
		"id":          basetypes.StringType{},
		"name":        basetypes.StringType{},
		"owner":       basetypes.StringType{},
		"type":        basetypes.StringType{},
		"update_time": basetypes.Int64Type{},
		"url_ui":      basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"action":          v.Action,
			"allocation_type": v.AllocationType,
			"components":      components,
			"create_time":     v.CreateTime,
			"description":     v.Description,
			"formula":         v.Formula,
			"id":              v.Id,
			"name":            v.Name,
			"owner":           v.Owner,
			"type":            v.RulesType,
			"update_time":     v.UpdateTime,
			"url_ui":          v.UrlUi,
		})

	return objVal, diags
}

func (v RulesValue) Equal(o attr.Value) bool {
	other, ok := o.(RulesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Action.Equal(other.Action) {
		return false
	}

	if !v.AllocationType.Equal(other.AllocationType) {
		return false
	}

	if !v.Components.Equal(other.Components) {
		return false
	}

	if !v.CreateTime.Equal(other.CreateTime) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Formula.Equal(other.Formula) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Owner.Equal(other.Owner) {
		return false
	}

	if !v.RulesType.Equal(other.RulesType) {
		return false
	}

	if !v.UpdateTime.Equal(other.UpdateTime) {
		return false
	}

	if !v.UrlUi.Equal(other.UrlUi) {
		return false
	}

	return true
}

func (v RulesValue) Type(ctx context.Context) attr.Type {
	return RulesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RulesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"action":          basetypes.StringType{},
		"allocation_type": basetypes.StringType{},
		"components": basetypes.ListType{
			ElemType: ComponentsValue{}.Type(ctx),
		},
		"create_time": basetypes.Int64Type{},
		"description": basetypes.StringType{},
		"formula":     basetypes.StringType{},
		"id":          basetypes.StringType{},
		"name":        basetypes.StringType{},
		"owner":       basetypes.StringType{},
		"type":        basetypes.StringType{},
		"update_time": basetypes.Int64Type{},
		"url_ui":      basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = ComponentsType{}

type ComponentsType struct {
	basetypes.ObjectType
}

func (t ComponentsType) Equal(o attr.Type) bool {
	other, ok := o.(ComponentsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ComponentsType) String() string {
	return "ComponentsType"
}

func (t ComponentsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	includeNullAttribute, ok := attributes["include_null"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include_null is missing from object`)

		return nil, diags
	}

	includeNullVal, ok := includeNullAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include_null expected to be basetypes.BoolValue, was: %T`, includeNullAttribute))
	}

	inverseSelectionAttribute, ok := attributes["inverse_selection"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`inverse_selection is missing from object`)

		return nil, diags
	}

	inverseSelectionVal, ok := inverseSelectionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`inverse_selection expected to be basetypes.BoolValue, was: %T`, inverseSelectionAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return nil, diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	valuesAttribute, ok := attributes["values"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`values is missing from object`)

		return nil, diags
	}

	valuesVal, ok := valuesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`values expected to be basetypes.ListValue, was: %T`, valuesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ComponentsValue{
		IncludeNull:      includeNullVal,
		InverseSelection: inverseSelectionVal,
		Key:              keyVal,
		Mode:             modeVal,
		ComponentsType:   typeVal,
		Values:           valuesVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewComponentsValueNull() ComponentsValue {
	return ComponentsValue{
		state: attr.ValueStateNull,
	}
}

func NewComponentsValueUnknown() ComponentsValue {
	return ComponentsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewComponentsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ComponentsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ComponentsValue Attribute Value",
				"While creating a ComponentsValue value, a missing attribute value was detected. "+
					"A ComponentsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ComponentsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ComponentsValue Attribute Type",
				"While creating a ComponentsValue value, an invalid attribute value was detected. "+
					"A ComponentsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ComponentsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ComponentsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ComponentsValue Attribute Value",
				"While creating a ComponentsValue value, an extra attribute value was detected. "+
					"A ComponentsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ComponentsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewComponentsValueUnknown(), diags
	}

	includeNullAttribute, ok := attributes["include_null"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include_null is missing from object`)

		return NewComponentsValueUnknown(), diags
	}

	includeNullVal, ok := includeNullAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include_null expected to be basetypes.BoolValue, was: %T`, includeNullAttribute))
	}

	inverseSelectionAttribute, ok := attributes["inverse_selection"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`inverse_selection is missing from object`)

		return NewComponentsValueUnknown(), diags
	}

	inverseSelectionVal, ok := inverseSelectionAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`inverse_selection expected to be basetypes.BoolValue, was: %T`, inverseSelectionAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewComponentsValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	modeAttribute, ok := attributes["mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mode is missing from object`)

		return NewComponentsValueUnknown(), diags
	}

	modeVal, ok := modeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mode expected to be basetypes.StringValue, was: %T`, modeAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewComponentsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	valuesAttribute, ok := attributes["values"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`values is missing from object`)

		return NewComponentsValueUnknown(), diags
	}

	valuesVal, ok := valuesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`values expected to be basetypes.ListValue, was: %T`, valuesAttribute))
	}

	if diags.HasError() {
		return NewComponentsValueUnknown(), diags
	}

	return ComponentsValue{
		IncludeNull:      includeNullVal,
		InverseSelection: inverseSelectionVal,
		Key:              keyVal,
		Mode:             modeVal,
		ComponentsType:   typeVal,
		Values:           valuesVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewComponentsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ComponentsValue {
	object, diags := NewComponentsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewComponentsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ComponentsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewComponentsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewComponentsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewComponentsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewComponentsValueMust(ComponentsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ComponentsType) ValueType(ctx context.Context) attr.Value {
	return ComponentsValue{}
}

var _ basetypes.ObjectValuable = ComponentsValue{}

type ComponentsValue struct {
	IncludeNull      basetypes.BoolValue   `tfsdk:"include_null"`
	InverseSelection basetypes.BoolValue   `tfsdk:"inverse_selection"`
	Key              basetypes.StringValue `tfsdk:"key"`
	Mode             basetypes.StringValue `tfsdk:"mode"`
	ComponentsType   basetypes.StringValue `tfsdk:"type"`
	Values           basetypes.ListValue   `tfsdk:"values"`
	state            attr.ValueState
}

func (v ComponentsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["include_null"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["inverse_selection"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["values"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.IncludeNull.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["include_null"] = val

		val, err = v.InverseSelection.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["inverse_selection"] = val

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Mode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mode"] = val

		val, err = v.ComponentsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.Values.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["values"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ComponentsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ComponentsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ComponentsValue) String() string {
	return "ComponentsValue"
}

func (v ComponentsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var valuesVal basetypes.ListValue
	switch {
	case v.Values.IsUnknown():
		valuesVal = types.ListUnknown(types.StringType)
	case v.Values.IsNull():
		valuesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		valuesVal, d = types.ListValue(types.StringType, v.Values.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"include_null":      basetypes.BoolType{},
			"inverse_selection": basetypes.BoolType{},
			"key":               basetypes.StringType{},
			"mode":              basetypes.StringType{},
			"type":              basetypes.StringType{},
			"values": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"include_null":      basetypes.BoolType{},
		"inverse_selection": basetypes.BoolType{},
		"key":               basetypes.StringType{},
		"mode":              basetypes.StringType{},
		"type":              basetypes.StringType{},
		"values": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"include_null":      v.IncludeNull,
			"inverse_selection": v.InverseSelection,
			"key":               v.Key,
			"mode":              v.Mode,
			"type":              v.ComponentsType,
			"values":            valuesVal,
		})

	return objVal, diags
}

func (v ComponentsValue) Equal(o attr.Value) bool {
	other, ok := o.(ComponentsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IncludeNull.Equal(other.IncludeNull) {
		return false
	}

	if !v.InverseSelection.Equal(other.InverseSelection) {
		return false
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Mode.Equal(other.Mode) {
		return false
	}

	if !v.ComponentsType.Equal(other.ComponentsType) {
		return false
	}

	if !v.Values.Equal(other.Values) {
		return false
	}

	return true
}

func (v ComponentsValue) Type(ctx context.Context) attr.Type {
	return ComponentsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ComponentsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"include_null":      basetypes.BoolType{},
		"inverse_selection": basetypes.BoolType{},
		"key":               basetypes.StringType{},
		"mode":              basetypes.StringType{},
		"type":              basetypes.StringType{},
		"values": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}
